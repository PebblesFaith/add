%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (\700\744\754\750\755\750\761\762\760\740\762\756\760) ()
%%Title: (flags138.eps)
%%CreationDate: 4/18/2016 2:18 PM
%%Canvassize: 16383
%%BoundingBox: 60 256 535 586
%%HiResBoundingBox: 60.3174 256.8877 534.958 585.0024
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([\721\756\742\754\745\771\745\755\750\745])
%%+ 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 397)
%%+ 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 398)
%%+ 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 399)
%%+ 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 400)
%%+ 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 401)
%%+ 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 402)
%%+ 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 403)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 404)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 406)
%%+ 1 0.568627 0.611765 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 407)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 408)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 409)
%%+ 1 0.588235 0.631373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 410)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 411)
%%+ 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 412)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 413)
%%+ 0.963486 0.964409 0.965457 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 414)
%%+ 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 415)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 416)
%%+ 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 417)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 418)
%%+ 1 0.439216 0.494118 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 419)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 420)
%%+ 0.727313 0.73241 0.73864 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421)
%%+ 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 424)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 425)
%%+ 0.963486 0.964409 0.965457 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 426)
%%+ 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 427)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 428)
%%+ 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 429)
%%+ 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 431)
%%+ 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 432)
%%+ 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 433)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 434)
%%+ 0.34902 0.556863 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 435)
%%+ 0 0.188235 0.588235 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 436)
%%+ 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 437)
%%+ 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 438)
%%+ 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 439)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 440)
%%+ 0.321569 0.537255 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 441)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 442)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 443)
%%+ 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 444)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 445)
%%+ 0.934493 0.93615 0.938024 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 450)
%%+ 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 451)
%%+ 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 452)
%%+ 0.129412 0 0.011765 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 453)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 454)
%%+ 0.321569 0.537255 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 455)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 456)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 457)
%%+ 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 458)
%%+ 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 459)
%%+ 0.77465 0.779399 0.785018 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 460)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 461)
%%+ 1 0.54902 0.596078 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 462)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 463)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 464)
%%+ 1 0.560784 0.603922 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 465)
%%+ 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 466)
%%+ 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 467)
%%+ 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 468)
%%+ 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 469)
%%+ 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 470)
%%+ 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 471)
%%+ 0.14902 0 0.015686 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 472)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 298.5 420.3906 298.5 420.3906
%AI3_TileBox: -8.3623 24.9453 603.6377 816.9453
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595.2754 841.8901
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 6
%AI8_OpenToView: -404.3623 735.6118 1.5 1829 914 18 0 0 45 116 0 0
%AI5_OpenViewLayers: 777776
%%PageOrigin:0 49.8906
%AI7_GridSettings: 14.1732 8 14.1732 8 1 0 0.8 0.8 0.8 0.899992 0.899992 0.899992
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\322\360\340\361\361\350\360\356\342\352\340) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe Envelope) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\301\373\361\362\360\340\377 \347\340\353\350\342\352\340") (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\317\345\360\345\365\356\344") (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (\310\355\361\362\360\363\354\345\355\362\340\360\350\351 Adobe \357\356 \360\340\341\356\362\345 \361 \361\350\354\342\356\353\340\354\350) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\312\340\353\353\350\343\360\340\364\350\367\345\361\352\340\377 \352\350\361\362\374") (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\321\356\361\362\340\342\355\373\345 \364\350\343\363\360\373 Adobe) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
16 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 3 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000202030506
060809090B0C0E0E1012131315161818191A1A1B1C1D1D1E1F202021222322232424252627272828
29292A2A2A2B2C2C2C2D2E2E2E2F2F303031
>
<
B1B2B3B4B5B6B6B7B8B9BABBBCBCBDBEBFC0C1C2C3C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4
D5D5D6D7D8D9DADBDDDEDFE0E1E2E3E3E4E5E6E7E8E8E9EAEBECECEDEEEEEFF0F1F1F2F3F4F4F5F5
F6F7F7F8F9F9FAFBFBFCFCFDFEFEFFFFFFFF
>
<
565758595B5C5D5E5F61626364666768696B6C6D6F7071727473747677787A7B7D7E808183858688
898B8D8E9092949597999B9D9EA0A1A3A5A7A8AAACAEB0B2B4B5B8BABCBEC0C2C4C4C6C8CACCCFD1
D3D5D7D9DBDEDFE2E4E6E8EBEDEFF1F4F6F8
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000010101010101010101010202020303040404050505060707070809090A0A0B0B0C0D
0D0D0E0F0F1112131314151616171819191A
>
<
FFFEFEFDFCFBFBFAF9F8F8F7F6F5F5F4F3F3F2F1F0F0EFEEEDEDECEBEBEAE9E8E8E7E6E5E5E4E3E2
E2E1E0E0DFDEDDDDDCDBDADAD9D8D7D7D6D5D5D4D3D2D2D1D0CFCFCECDCCCCCBCACAC9C8C7C7C6C5
C4C4C3C2C2C1C0BFBFBEBDBCBCBBBAB9B9B8
>
<
706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49
4847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120
1F1E1D1C1B1A191817161514131211100F0E
>
<
7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39383737363534333231
302F2E2D2C2B2A292827262524232221201F
>
4 %_Br
<
3130302F2F2E2E2E2D2C2C2C2B2A2A2A29292828272726252424232223222120201F1E1D1D1C1B1A
1A1918181615131312100E0E0C0B0909080606050302020000000000000000000000000000000000
000000000000000000000000000000000000
>
<
FFFFFFFFFEFEFDFCFCFBFBFAF9F9F8F7F7F6F5F5F4F4F3F2F1F1F0EFEEEEEDECECEBEAE9E8E8E7E6
E5E4E3E3E2E1E0DFDEDDDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCBCAC9C8C7C6C5C4C3C3C2C1
C0BFBEBDBCBCBBBAB9B8B7B6B6B5B4B3B2B1
>
<
F8F6F4F1EFEDEBE8E6E4E2DFDEDBD9D7D5D3D1CFCCCAC8C6C4C4C2C0BEBCBAB8B5B4B2B0AEACAAA8
A7A5A3A1A09E9D9B9997959492908E8D8B898886858381807E7D7B7A7877767473747271706F6D6C
6B69686766646362615F5E5D5C5B59585756
>
<
1A1919181716161514131312110F0F0E0D0D0D0C0B0B0A0A09090807070706050505040404030302
02020101010101010101010100000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000
>
<
B8B9B9BABBBCBCBDBEBFBFC0C1C2C2C3C4C4C5C6C7C7C8C9CACACBCCCCCDCECFCFD0D1D2D2D3D4D5
D5D6D7D7D8D9DADADBDCDDDDDEDFE0E0E1E2E2E3E4E5E5E6E7E8E8E9EAEBEBECEDEDEEEFF0F0F1F2
F3F3F4F5F5F6F7F8F8F9FAFBFBFCFDFEFEFF
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E
5F606162636465666768696A6B6C6D6E6F70
>
<
1F202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445
464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566666768696A6B6C
6D6E6F707172737475767778797A7B7C7D7E
>
4 %_Br
[
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 91 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 420) 0 1 5 50 91 Bs
0.000031 0.694545 0.335912 0.000031 1 0.439216 0.494118 2 50 80.6061 %_BS
%_0.000031 0.694545 0.335912 0.000031 1 0.439216 0.494118 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 419) 0 1 5 50 80.6061 Bs
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 9 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 418) 0 1 5 50 9 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 11)
(Unnamed gradient 11) 0 4 Bd
[
<
0000010304050607090A0C0E0F101213151718
>
<
000001020304050506070808090A0B0C0D0E0F
>
<
0000010203040505060708090A0A0B0C0D0E0F
>
0.000031
<
FFFEFDFCFBFAF9F8F7F6F4F3F2F1F0EFEEEDEC
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
4 %_Br
<
060504010000
>
<
030201010000
>
<
040302010000
>
0.000031
<
F9FAFBFDFEFF
>
<
FAFBFCFDFEFF
>
<
FAFBFCFDFEFF
>
4 %_Br
<
0F0E0C0B0A090806
>
<
0B0A090906050403
>
<
0908070607060504
>
0.000031
<
F2F3F4F5F6F7F8F9
>
<
F2F3F4F5F7F8F9FA
>
<
F3F4F5F6F7F8F9FA
>
4 %_Br
[
0.093996 0.059663 0.058747 0.000031 0.92549 0.929412 0.929412 2 50 94 %_BS
%_0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 429) 0 1 5 50 94 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 85.2 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 428) 0 1 5 50 85.2 Bs
0.024537 0.012116 0.015564 0.000031 0.976471 0.980392 0.980392 2 50 58.8 %_BS
%_0.0224 0.015991 0.015442 0.000031 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 427) 0 1 5 50 58.8 Bs
0.058717 0.042725 0.034089 0.000031 0.94902 0.94902 0.952941 2 50 6 %_BS
%_0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 424) 0 1 5 50 6 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 15)
(Unnamed gradient 15) 0 4 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000001010303040606070709090A0A0C0C0D0D0E0E100F1110121113121415151616181819191B1B
1C1C1E1E1F1F2020212122232223232424252526252626272728272828292929292A2B2B2B2B2C2C
2C2C2D2D2D2D2E2E2E2E2F2F2F2F303031
>
<
8A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1
B2B3B4B4B5B6B7B8B8B9BABBBCBDBEBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6
D7D7D8D9DADBDCDDDDDEDFE0E1E2E3E3E4E5E6E7E8E8E9EAEBECEDEDEEEFF0F1F1F2F3F4F4F5F6F6
F7F8F8F9FAFAFBFBFCFCFDFEFEFFFFFFFF
>
<
35363738393A3B3C3D3E3F403F404143434445464748494A4B4C4D4E4F505152535453555657585A
5B5C5D5E5F61626364656668696B6C6D6F6E6F717274757678797A7C7D7E808183848687898A8C8E
8E8F9193949697999B9D9EA0A2A3A5A7A9AAACAEAFB1B1B3B5B6B8BABCBEC0C2C5C7C9CBCED0D2D5
D7D9DBDDDFDFE2E4E6E8EAEDEFF1F4F6F8
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000001010101010202
020202030303030304040505050606060607070808080809090A0A0B0B0C0C0D0D0D0E0E0F0F1010
111113131414151516161717181819191A
>
<
FFFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F2F2F1F1F0F0EFEFEEEEEDEDECECEBEB
EAEAE9E9E8E8E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDADAD9D9D8D8D7D7D6D6
D5D5D4D4D3D3D2D2D1D1D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1
C0C0BFBFBEBEBDBDBCBCBBBBBABAB9B9B8
>
<
969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F
6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847
464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F
1E1D1C1B1A191817161514131211100F0E
>
<
A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8B8A89888786858483828181807F7E7D7C
7B7A797877767574737271706F6E6D6C6B6B6A696867666564636261605F5E5D5C5B5A5958575655
5554535251504F4E4D4C4B4A49484746454443424140403F3E3D3C3B3A393837363534333231302F
2E2D2C2B2A2A292827262524232221201F
>
4 %_Br
<
3130302F2F2F2F2E2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A29292929282827282727262625262525
24242323222322212120201F1F1E1E1C1C1B1B1919181816161515141213111210110F100E0E0D0D
0C0C0A0A090907070606040303010100000000000000000000000000000000000000000000000000
0000000000000000000000000000000000
>
<
FFFFFFFFFEFEFDFCFCFBFBFAFAF9F8F8F7F6F6F5F4F4F3F2F1F1F0EFEEEDEDECEBEAE9E8E8E7E6E5
E4E3E3E2E1E0DFDEDDDDDCDBDAD9D8D7D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0
BFBEBEBDBCBBBAB9B8B8B7B6B5B4B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B
9A999897969594939291908F8E8D8C8B8A
>
<
F8F6F4F1EFEDEAE8E6E4E2DFDFDDDBD9D7D5D2D0CECBC9C7C5C2C0BEBCBAB8B6B5B3B1B1AFAEACAA
A9A7A5A3A2A09E9D9B9997969493918F8E8E8C8A898786848381807E7D7C7A797876757472716F6E
6F6D6C6B69686665646362615F5E5D5C5B5A585756555354535251504F4E4D4C4B4A494847464544
434341403F403F3E3D3C3B3A3938373635
>
<
1A1919181817171616151514141313111110100F0F0E0E0D0D0D0C0C0B0B0A0A0909080808080707
06060606050505040403030303030202020202010101010100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000
>
<
B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCC
CDCDCECECFCFD0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDCDCDDDDDEDEDFDFE0E0E1E1
E2E2E3E3E4E4E5E5E6E6E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F4F4F5F5F6F6
F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFF
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F90919293949596
>
<
1F202122232425262728292A2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404041424344
45464748494A4B4C4D4E4F50515253545555565758595A5B5C5D5E5F606162636465666768696A6B
6B6C6D6E6F707172737475767778797A7B7C7D7E7F80818182838485868788898A8B8C8D8E8F9091
9293949596969798999A9B9C9D9E9FA0A1
>
4 %_Br
0.190341
1
0.972778
0.103395
0.721569
0.054902
0.121569
4 %_Br
[
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 93 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 411) 0 1 5 50 93 Bs
0.000031 0.542565 0.208957 0.000031 1 0.588235 0.631373 2 50 80 %_BS
%_0.000031 0.542565 0.208957 0.000031 1 0.588235 0.631373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 410) 0 1 5 50 80 Bs
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 47.2727 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 409) 0 1 5 50 47.2727 Bs
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 7 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 406) 0 1 5 50 7 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 4 Bd
[
<
ADAEAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABCBDBEBEBFC0C1C1C2C3C3C4C5C5C6C7C8C8C9C9
C9CACBCCCCCCCDCDCECFCFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D7D7D8D9D9DADBDBDCDDDDDEDFDFE0
E1E2E2E3E4E4E5E6E6E7E8E9E9EAEBEBECEDEDEEEEEFEFF0F1F2F3F4F5F5F6F7F8F8F9FAFBFCFDFD
FEFFFFFFFFFFFFFFFFFFFFFF
>
<
7B7C7C7D7E7F7F80828182848585868787888A8A8B8D8E8E8F90909192939394959596979898999A
9A9B9C9D9D9E9F9EA0A1A0A2A3A4A3A5A6A5A7A8A9A9AAABABACADAEAEAFB0B0B2B3B4B4B5B7B7B8
BABBBBBCBEBEC0C1C2C3C5C7C7C8CACACCCDCFCFD0D1D2D3D5D7D7D9DBDBDDDFE0E1E3E4E5E6E8E8
EAECEDEEF0F2F2F4F5F6F6F7
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000001030506080A
0C0D0F1112131517191B1D20
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001010101
020202020303030405070709
>
<
4F4E4E4D4D4C4C4B4A4A4949484847464645454444434242414140403F3E3E3D3D3C3C3B3A3A3939
383837363635353434333232313130302F2E2E2D2D2C2C2B2A2A2929282727262625252423232222
2121201F1F1E1E1D1D1C1B1B1A1A19191817171616151514131312121111100F0F0E0E0D0D0C0B0B
0A0A09090807070606050504
>
<
87868685848383828181807F7E7E7D7C7C7B7A7A79787777767575747372727170706F6E6D6D6C6B
6B6A69686867666665646463626161605F5F5E5D5C5C5B5A5A59585757565555545352525150504F
4E4D4D4C4B4B4A49494847464645444443424141403F3F3E3D3C3C3B3A3A39383737363535343333
323130302F2E2E2D2C2B2B2A
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C
>
4 %_Br
<
FFFFFFFFFFFFFFFFFFFFFFFEFDFDFCFBFAF9F8F8F7F6F5F5F4F3F2F1F0EFEFEEEEEDEDECEBEBEAE9
E9E8E7E6E6E5E4E4E3E2E2E1E0DFDFDEDDDDDCDBDBDAD9D9D8D7D7D6D5D5D4D4D3D3D2D2D1D1D0D0
CFCFCFCECDCDCCCCCCCBCAC9C9C9C8C8C7C6C5C5C4C3C3C2C1C1C0BFBEBEBDBCBABAB9B8B8B7B6B6
B5B4B3B3B2B1B1B0AFAEAEAD
>
<
F7F6F6F5F4F2F2F0EEEDECEAE8E8E6E5E4E3E1E0DFDDDBDBD9D7D7D5D3D2D1D0CFCFCDCCCACAC8C7
C7C5C3C2C1C0BEBEBCBBBBBAB8B7B7B5B4B4B3B2B0B0AFAEAEADACABABAAA9A9A8A7A5A6A5A3A4A3
A2A0A1A09E9F9E9D9D9C9B9A9A99989897969595949393929190908F8E8E8D8B8A8A888787868585
84828182807F7F7E7D7C7C7B
>
<
201D1B1917151312110F0D0C0A080605030100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
09070705040303030202020201010101000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
040505060607070809090A0A0B0B0C0D0D0E0E0F0F10111112121313141515161617171819191A1A
1B1B1C1D1D1E1E1F1F20212122222323242525262627272829292A2A2B2C2C2D2D2E2E2F30303131
32323334343535363637383839393A3A3B3C3C3D3D3E3E3F40404141424243444445454646474848
49494A4A4B4C4C4D4D4E4E4F
>
<
2A2B2B2C2D2E2E2F30303132333334353536373738393A3A3B3C3C3D3E3F3F404141424344444546
46474849494A4B4B4C4D4D4E4F50505152525354555556575758595A5A5B5C5C5D5E5F5F60616162
636464656666676868696A6B6B6C6D6D6E6F70707172727374757576777778797A7A7B7C7C7D7E7E
7F8081818283838485868687
>
<
7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3
A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACB
CCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3
F4F5F6F7F8F9FAFBFCFDFEFF
>
4 %_Br
1
0.96878
0.124331
0.035065
0.015686
0.164706
0.486275
4 %_Br
[
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 93 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 445) 0 1 5 50 93 Bs
0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 2 50 84.4 %_BS
%_0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 444) 0 1 5 50 84.4 Bs
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 58.6 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 443) 0 1 5 50 58.6 Bs
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 7 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 440) 0 1 5 50 7 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 5)
(Unnamed gradient 5) 0 4 Bd
[
<
0000010304050607090A0C0E0F101213151718
>
<
000001020304050506070808090A0B0C0D0E0F
>
<
0000010203040505060708090A0A0B0C0D0E0F
>
0.000031
<
FFFEFDFCFBFAF9F8F7F6F4F3F2F1F0EFEEEDEC
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
4 %_Br
<
060504010000
>
<
030201010000
>
<
040302010000
>
0.000031
<
F9FAFBFDFEFF
>
<
FAFBFCFDFEFF
>
<
FAFBFCFDFEFF
>
4 %_Br
<
0F0E0C0B0A090806
>
<
0B0A090906050403
>
<
0908070607060504
>
0.000031
<
F2F3F4F5F6F7F8F9
>
<
F2F3F4F5F7F8F9FA
>
<
F3F4F5F6F7F8F9FA
>
4 %_Br
[
0.093996 0.059663 0.058747 0.000031 0.92549 0.929412 0.929412 2 50 93 %_BS
%_0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 417) 0 1 5 50 93 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 84.4 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 416) 0 1 5 50 84.4 Bs
0.024537 0.012116 0.015564 0.000031 0.976471 0.980392 0.980392 2 50 58.6 %_BS
%_0.0224 0.015991 0.015442 0.000031 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 415) 0 1 5 50 58.6 Bs
0.058717 0.042725 0.034089 0.000031 0.94902 0.94902 0.952941 2 50 7 %_BS
%_0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 412) 0 1 5 50 7 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 7)
(Unnamed gradient 7) 0 4 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
010303040405050707080A090B0A0C0B0D0C0E0D0F111012121313141416171719191B1B1C1C1E1D
1F20202020212122222324232424252526262726272828292829292A2A2A2B2B2C2B2C2C2D2C2D2D
2E2E2E2F2F2F2F303031
>
<
91929394969798999A9B9C9D9E9F9FA1A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B4B5B6B7
B8B9B9BABBBCBDBEBFC0C1C2C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D1D2D3D4D5D6D7D8D9DADBDC
DDDEDEDFE0E1E2E3E4E4E5E6E7E8E9E9EAEBECEDEEEEEFF0F1F1F2F3F4F4F5F6F6F7F8F8F9FAFAFB
FBFCFCFDFEFEFFFFFFFF
>
<
3B3C3D3E4041424344454645464748494A4B4C4D4E4F5051525354565758595B5C5B5C5D5E606162
6364656768696B6C6D6F7071737473747677797A7B7D7E808182848587888A8C8E90919393949698
999B9D9EA0A2A3A5A7A9AAACAEB0B1B3B5B5B6B8BABCBEC0C3C5C7C9CCCED0D2D5D7D9DBDDE0E2E2
E4E6E8EAEDEFF1F4F6F8
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001010101010202020202020303
03030404040505050506070707070808090909090A0B0B0C0C0D0D0D0D0E0F0F1010111213131414
1516161717181819191A
>
<
FFFEFEFDFDFCFCFBFBFAF9F9F8F8F7F7F6F6F5F5F4F3F3F2F2F1F1F0F0EFEEEEEDEDECECEBEBEAEA
E9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDDDDDCDCDBDBDADAD9D8D8D7D7D6D6D5D5D4D4
D3D2D2D1D1D0D0CFCFCECDCDCCCCCBCBCACAC9C9C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBFBEBE
BDBCBCBBBBBABAB9B9B8
>
<
8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A6968
67666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140
3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1918
17161514131211100F0E
>
<
9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7B7A7978777675
74737271706F6E6D6C6B6A69686767666564636261605F5E5D5C5B5A59585756555453525251504F
4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A2929
2827262524232221201F
>
4 %_Br
<
3130302F2F2F2F2E2E2E2D2D2C2D2C2C2B2C2B2B2A2A2A2929282928282726272626252524242324
2322222121202020201F1D1E1C1C1B1B191917171614141313121210110F0D0E0C0D0B0C0A0B090A
08070705050404030301000000000000000000000000000000000000000000000000000000000000
00000000000000000000
>
<
FFFFFFFFFEFEFDFCFCFBFBFAFAF9F8F8F7F6F6F5F4F4F3F2F1F1F0EFEEEEEDECEBEAE9E9E8E7E6E5
E4E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D5D4D3D2D1D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C2C1
C0BFBEBDBCBBBAB9B9B8B7B6B5B4B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A19F9F9E9D9C
9B9A9998979694939291
>
<
F8F6F4F1EFEDEAE8E6E4E2E2E0DDDBD9D7D5D2D0CECCC9C7C5C3C0BEBCBAB8B6B5B5B3B1B0AEACAA
A9A7A5A3A2A09E9D9B99989694939391908E8C8A888785848281807E7D7B7A797776747374737170
6F6D6C6B6968676564636261605E5D5C5B5C5B5958575654535251504F4E4D4C4B4A494847464546
4544434241403E3D3C3B
>
<
1A19191818171716161514141313121110100F0F0E0D0D0D0D0C0C0B0B0A09090909080807070707
06050505050404040303030302020202020201010101010000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000
>
<
B8B9B9BABABBBBBCBCBDBEBEBFBFC0C0C1C1C2C2C3C4C4C5C5C6C6C7C7C8C9C9CACACBCBCCCCCDCD
CECFCFD0D0D1D1D2D2D3D4D4D5D5D6D6D7D7D8D8D9DADADBDBDCDCDDDDDEDFDFE0E0E1E1E2E2E3E3
E4E5E5E6E6E7E7E8E8E9EAEAEBEBECECEDEDEEEEEFF0F0F1F1F2F2F3F3F4F5F5F6F6F7F7F8F8F9F9
FAFBFBFCFCFDFDFEFEFF
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F
>
<
1F20212223242526272829292A2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F4041424344
45464748494A4B4C4D4E4F50515252535455565758595A5B5C5D5E5F60616263646566676768696A
6B6C6D6E6F707172737475767778797A7B7B7C7D7E7F808182838485868788898A8B8C8D8E8F9090
9192939495969798999A
>
4 %_Br
0.190341
1
0.972778
0.103395
0.721569
0.054902
0.121569
4 %_Br
[
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 92 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 466) 0 1 5 50 92 Bs
0.000031 0.569116 0.231235 0.000031 1 0.560784 0.603922 2 50 83.6 %_BS
%_0.000031 0.569116 0.231235 0.000031 1 0.560784 0.603922 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 465) 0 1 5 50 83.6 Bs
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 58.4 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 464) 0 1 5 50 58.4 Bs
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 2 50 8 %_BS
%_0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 461) 0 1 5 50 8 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 9)
(Unnamed gradient 9) 0 4 Bd
[
<
ADAEAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABCBDBEBEBFC0C1C1C2C3C3C4C5C5C6C7C8C8C9C9
C9CACBCCCCCCCDCDCECFCFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D7D7D8D9D9DADBDBDCDDDDDEDFDFE0
E1E2E2E3E4E4E5E6E6E7E8E9E9EAEBEBECEDEDEEEEEFEFF0F1F2F3F4F5F5F6F7F8F8F9FAFBFCFDFD
FEFFFFFFFFFFFFFFFFFFFFFF
>
<
7B7C7C7D7E7F7F80828182848585868787888A8A8B8D8E8E8F90909192939394959596979898999A
9A9B9C9D9D9E9F9EA0A1A0A2A3A4A3A5A6A5A7A8A9A9AAABABACADAEAEAFB0B0B2B3B4B4B5B7B7B8
BABBBBBCBEBEC0C1C2C3C5C7C7C8CACACCCDCFCFD0D1D2D3D5D7D7D9DBDBDDDFE0E1E3E4E5E6E8E8
EAECEDEEF0F2F2F4F5F6F6F7
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000001030506080A
0C0D0F1112131517191B1D20
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001010101
020202020303030405070709
>
<
4F4E4E4D4D4C4C4B4A4A4949484847464645454444434242414140403F3E3E3D3D3C3C3B3A3A3939
383837363635353434333232313130302F2E2E2D2D2C2C2B2A2A2929282727262625252423232222
2121201F1F1E1E1D1D1C1B1B1A1A19191817171616151514131312121111100F0F0E0E0D0D0C0B0B
0A0A09090807070606050504
>
<
87868685848383828181807F7E7E7D7C7C7B7A7A79787777767575747372727170706F6E6D6D6C6B
6B6A69686867666665646463626161605F5F5E5D5C5C5B5A5A59585757565555545352525150504F
4E4D4D4C4B4B4A49494847464645444443424141403F3F3E3D3C3C3B3A3A39383737363535343333
323130302F2E2E2D2C2B2B2A
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C
>
4 %_Br
<
FFFFFFFFFFFFFFFFFFFFFFFEFDFDFCFBFAF9F8F8F7F6F5F5F4F3F2F1F0EFEFEEEEEDEDECEBEBEAE9
E9E8E7E6E6E5E4E4E3E2E2E1E0DFDFDEDDDDDCDBDBDAD9D9D8D7D7D6D5D5D4D4D3D3D2D2D1D1D0D0
CFCFCFCECDCDCCCCCCCBCAC9C9C9C8C8C7C6C5C5C4C3C3C2C1C1C0BFBEBEBDBCBABAB9B8B8B7B6B6
B5B4B3B3B2B1B1B0AFAEAEAD
>
<
F7F6F6F5F4F2F2F0EEEDECEAE8E8E6E5E4E3E1E0DFDDDBDBD9D7D7D5D3D2D1D0CFCFCDCCCACAC8C7
C7C5C3C2C1C0BEBEBCBBBBBAB8B7B7B5B4B4B3B2B0B0AFAEAEADACABABAAA9A9A8A7A5A6A5A3A4A3
A2A0A1A09E9F9E9D9D9C9B9A9A99989897969595949393929190908F8E8E8D8B8A8A888787868585
84828182807F7F7E7D7C7C7B
>
<
201D1B1917151312110F0D0C0A080605030100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
09070705040303030202020201010101000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
040505060607070809090A0A0B0B0C0D0D0E0E0F0F10111112121313141515161617171819191A1A
1B1B1C1D1D1E1E1F1F20212122222323242525262627272829292A2A2B2C2C2D2D2E2E2F30303131
32323334343535363637383839393A3A3B3C3C3D3D3E3E3F40404141424243444445454646474848
49494A4A4B4C4C4D4D4E4E4F
>
<
2A2B2B2C2D2E2E2F30303132333334353536373738393A3A3B3C3C3D3E3F3F404141424344444546
46474849494A4B4B4C4D4D4E4F50505152525354555556575758595A5A5B5C5C5D5E5F5F60616162
636464656666676868696A6B6B6C6D6D6E6F70707172727374757576777778797A7A7B7C7C7D7E7E
7F8081818283838485868687
>
<
7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3
A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACB
CCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3
F4F5F6F7F8F9FAFBFCFDFEFF
>
4 %_Br
1
0.96878
0.124331
0.035065
0.015686
0.164706
0.486275
4 %_Br
[
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 95 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 459) 0 1 5 50 95 Bs
0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 2 50 86 %_BS
%_0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 458) 0 1 5 50 86 Bs
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 59 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 457) 0 1 5 50 59 Bs
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 5 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 454) 0 1 5 50 5 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 101)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 101) 0 3 Bd
[
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFDFCFBF9F8F7F6F5F3F1F0EFEEECEBEAE9E8
>
<
FEFEFFFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFD
FEFDFFFEFDFFFEFDFEFBF9F6F4F2F0EEEDEBEAE8E5E4E2DFDEDCDBD9D7D7D6
>
<
4647494A4B4D4E50505052535354545655565758595A5B5C5D5E5F60606162636363646464656565
6566666767676869696B6D6F7072737577797A7C7F818385888A8C8F919396
>
<
36383A3D3F41434547484A4C4E505254575A5D606366686B6E70727577797C7E808284868A8C8E91
929597999C9EA0A2A5A8ACAFB1B4B7B9BCBEC1C4C6C9CBCDD0D2D5D7D8DBDC
>
<
05050505050505050404040404040404040404040404030303030303030303030303030302020202
02020202020202020202010101010101010101010101010100000000000000
>
<
222221212120201F1F1F1E1E1E1D1D1C1C1C1B1B1B1A1A1919191818181717161616151515141414
131312121211111110100F0F0F0E0E0E0D0D0C0C0C0B0B0B0A0A0909090808
>
<
61605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3C3B3A39
3837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A
>
4 %_Br
<
EEEFF0F2F3F5F6F7F8F9FBFCFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
DCDEDFE1E3E5E7E9EBEDEEF0F2F4F6F7FAFCFCFDFFFDFEFFFDFEFDFEFFFEFEFFFEFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFEFE
>
<
8A888684817F7D7A7977757372706F6D6B6A6968676767666665656565646464636362626160605F
5E5D5C5B5A59585756555654545353525050504E4D4B4A494746
>
<
D2D0CDCBC9C6C4C0BEBCB9B7B4B1AFABA8A6A3A19E9C99979592918E8C8A888685807E7C79777572
706E6B686663605D5A575452504E4C4A48474543413F3D3A3836
>
<
00000000000000010101010101010101010101010202020202020202020202020203030303030303
0303030303030404040404040404040404040405050505050505
>
<
0A0A0B0B0B0C0C0D0D0D0E0E0E0F0F10101011111112121213131414141515151616171717181818
19191A1A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F20202121212222
>
<
1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F41424344454647
48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
>
4 %_Br
[
0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 2 50 86 %_BS
%_0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 433) 0 1 5 50 86 Bs
1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 2 50 50 %_BS
%_1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 432) 0 1 5 50 50 Bs
0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 2 50 14 %_BS
%_0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 431) 0 1 5 50 14 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 102)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 102) 0 3 Bd
[
<
A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B3B4B5B6B7B9BABCBDBEBEC0C1C2C2C3C4C5C6C7C8C8C9C9
CACBCCCDCDCECFCFD0D0D1D2D2D3D4D4D5D6D6D7D7D8D9DADBDCDCDDDEDEDFE0E1E1E2E3E3E4E5E5
E6E7E7E8E9EAEAEBEBECECEDEEEEEFF0F1F2F3F4F4F6F7F9FA
>
<
7374757677787879797A7B7D7E7F8182828384858688898B8C8E8D8E90919293949596979898999A
9B9C9D9E9FA0A1A1A2A3A4A5A6A7A8A9AAAAAAABACAEAFB0B1B2B3B4B4B6B7B8B9BBBCBDBFC0C0C2
C3C4C6C7C9CACBCDCECECFD1D2D4D5D7D9DADCDDDEE0E2E4E6
>
0.000031
0.000031
<
5958575656555453525150504F4E4D4C4B4A4A49484746454444434241403F3E3E3D3C3B3A393838
3736353433323231302F2E2D2D2C2B2A2928272726252423222121201F1E1D1C1B1B1A1918171615
1514131211100F0F0E0D0C0B0A090908070605040303020100
>
<
8E8D8C8B8A8989888786858483828180807F7E7D7C7B7A79787777767574737271706F6E6D6D6C6B
6A69686766656464636261605F5E5D5C5B5A5A59585756555453525151504F4E4D4C4B4A49484847
464544434241403F3E3E3D3C3B3A3938373635353433323130
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AF
AEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
>
4 %_Br
<
FFFFFFFFFFFFFFFFFFFFFEFEFDFCFBFAF9F8F7F7F6F5F5F4F3F2F1F0EFEFEEEEEDEDECEBEBEAE9E8
E7E6E6E5E4E3E2E2E1E0DFDEDDDDDCDBDBDAD9D9D8D7D7D6D5D5D4D4D3D2D2D1D1D0D0CFCECDCDCC
CCCBCACAC9C8C8C8C7C6C5C5C4C3C2C2C2C1C0BFBEBDBDBBBBBAB8B7B7B6B5B4B4B3B2B1B0AFAEAE
ADACACABAAA9A8A8A7A6A5A4
>
<
F7F6F5F5F4F2F0F0EEECEAEAE8E7E5E5E3E1DFDEDDDBDAD8D7D6D4D2D2D1CFCECECDCBC9C9C7C6C4
C2C2C1BFBEBEBCBAB9B9B8B6B5B5B3B2B1B0B0AEADACACABAAA9A9A8A6A5A5A4A3A2A2A1A09F9E9E
9D9C9B9B9A9998989796949594939190908F8E8D8E8C8B8A8A898786868583828381807F7E7E7D7B
7A7A79787778777675757473
>
<
201D1B1916151412110F0E0C0A080604030100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
09070605040303020202020201010101000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
>
<
0405050607070809090A0A0B0C0C0D0E0E0F101011121213141415161617171819191A1B1B1C1D1D
1E1F1F2021212222232424252626272828292A2A2B2C2C2D2E2E2F2F303131323333343535363737
3839393A3B3B3C3C3D3E3E3F404041424243444445464647474849494A4B4B4C4D4D4E4F4F505151
525353545455565657585859
>
<
2A2B2C2C2D2E2F2F303132323334353536373839393A3B3C3C3D3E3F3F4041424243444545464748
49494A4B4C4C4D4E4F4F505152525354555656575859595A5B5C5C5D5E5F5F606162626364656666
676869696A6B6C6C6D6E6F6F707172737374757676777879797A7B7C7C7D7E7F7F80818283838485
8686878889898A8B8C8C8D8E
>
<
7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3
A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACB
CCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3
F4F5F6F7F8F9FAFBFCFDFEFF
>
4 %_Br
[
0.980774 0.903441 0.000031 0.000031 0 0.188235 0.588235 2 50 92 %_BS
%_0.980774 0.903441 0.000031 0.000031 0 0.188235 0.588235 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 436) 0 1 5 50 92 Bs
0.643885 0.450019 0.000031 0.000031 0.34902 0.556863 1 2 50 83.6 %_BS
%_0.643885 0.450019 0.000031 0.000031 0.34902 0.556863 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 435) 0 1 5 50 83.6 Bs
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 2 50 8 %_BS
%_1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 434) 0 1 5 50 8 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 103)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 103) 0 3 Bd
[
<
2D2E2F313233343537383A3B3C3D3E3F414243444647484A4B4C4D4E4F5051525354555758595A5B
>
<
20212122232425262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041424344
>
<
1D1E1F20212122232425272829292A2B2C2D2D2E2F3030313233343536363738393A3B3C3C3D3E3F
>
0.000031
<
D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
>
<
DAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3
>
<
DBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4
>
4 %_Br
<
5B5A5958575554535251504F4E4D4C4B4A484746444342413F3E3D3C3B3A383735343332312F2E2D
>
<
44434241403F3E3D3C3B3A39383837363534333231302F2F2E2D2C2B2A2928272625242322212120
>
<
3F3E3D3C3C3B3A3938373636353433323130302F2E2D2D2C2B2A29292827252423222121201F1E1D
>
0.000031
<
B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9
>
<
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DA
>
<
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
>
4 %_Br
[
0.358373 0.2663 0.24686 0.000031 0.694118 0.701961 0.705882 2 50 90 %_BS
%_0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 439) 0 1 5 50 90 Bs
0.177584 0.124544 0.11545 0.000031 0.85098 0.854902 0.858824 2 50 50 %_BS
%_0.176486 0.124422 0.114809 0.000031 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 438) 0 1 5 50 50 Bs
0.358373 0.2663 0.24686 0.000031 0.694118 0.701961 0.705882 2 50 10 %_BS
%_0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 437) 0 1 5 50 10 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 106)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 106) 0 3 Bd
[
<
626263646566666768696A6B6C6D6E6F7071727374757778797B7D7E808182838586878788898B8C
8E8F919395979A9C9F
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFCFBFBFBFAFAF9F8F6F5F4F3F2F1F0EFEEEDEDEDECECEC
EBEBEBEAE9E8E7E7E6
>
<
EBEAE8E7E7E8E8E9E8E7E5E3E1DFDDDDDBDAD8D7D5D4D3D2D0D0CFCECDCBCAC9C7C6C7C6C6C5C4C3
C3C2C1C2C5C5C4C4C3
>
<
ACADAFB0B2B3B5B6B7B8BABBBDBEC0C2C3C5C6C8C9CACCCDCED0D1D1D2D3D5D6D7D8D9DBDCDDDEE0
E1E2E3E4E5E6E7E7E8
>
<
5251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3837363534333231302F2E2D2C2B2A
292827262524232221
>
0
<
08080808080707070707070707070706060606060606060606050505050505050505040404040404
040404040303030303
>
4 %_Br
<
BEBCB9B7B5B3B1AEABA8A6A4A19F9C9A989693918F8E8C8B8988888786858381807E7D7B7A797877
7574737271706F6E6D6C6B6A69686766656564636262
>
<
D8D9DADADBDDDEDFE1E2E3E4E5E6E7E7E8E9EAEBEBEBECECECEDEDEEEEEFF0F2F3F4F5F6F7F8F9FA
FAFBFBFBFCFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
BDBDBDBEBFBFBDBEBFC0C1C2C3C3C4C4C1C1C2C1C2C3C3C4C5C6C3C4C6C7C9CBCDCECFD0CFD0D2D3
D4D5D7D8DADBDBDDDFE1E3E5E7E8E9E8E7E7E7E8EAEB
>
<
F2F1F1F0EFEEEDEDECEBEBEAE9E8E7E7E5E5E4E3E2E1E0DEDDDCDAD9D8D7D6D3D2D1D1D0CFCECDCC
CAC9C8C6C5C3C1C0BEBDBBBAB8B7B6B5B3B2B0AFADAC
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F3031323435363738393A3B3C
3D3E3F404142434445464748494A4B4C4D4E4F505152
>
0
<
02020202020203030303030303030303040404040404040404040505050505050505050506060606
06060606060607070707070707070707080808080808
>
4 %_Br
[
0.622309 0.900236 0.76611 0.910674 0.129412 0 0.011765 2 50 87 %_BS
%_0.622309 0.900236 0.76611 0.910674 0.129412 0 0.011765 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 453) 0 1 5 50 87 Bs
0.383062 1 0.923125 0.673945 0.321569 0 0.031373 2 50 50 %_BS
%_0.383062 1 0.923125 0.673945 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 452) 0 1 5 50 50 Bs
0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 2 50 13 %_BS
%_0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 451) 0 1 5 50 13 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 109)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 109) 0 3 Bd
[
<
00000103040506090A0B0C0E0F
>
<
00000102030405070809090A0B
>
<
00000102030405050606070809
>
0.000031
<
FFFEFDFCFBFAF9F7F6F5F4F3F2
>
<
FFFEFDFCFBFAF9F7F6F5F4F3F2
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3
>
4 %_Br
<
0F0E0C0B0A0906050403010000
>
<
0B0A0909080705040302010000
>
<
09080706060505040302010000
>
0.000031
<
F2F3F4F5F6F7F9FAFBFCFDFEFF
>
<
F2F3F4F5F6F7F9FAFBFCFDFEFF
>
<
F3F4F5F6F7F8F9FAFBFCFDFEFF
>
4 %_Br
[
0.058717 0.042725 0.034089 0.000031 0.94902 0.94902 0.952941 2 50 92 %_BS
%_0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 469) 0 1 5 50 92 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 83.6 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 468) 0 1 5 50 83.6 Bs
0.058717 0.042725 0.034089 0.000031 0.94902 0.94902 0.952941 2 50 8 %_BS
%_0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 467) 0 1 5 50 8 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 110)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 110) 0 3 Bd
[
<
626263646565666768696A6B6C6D6E6F70717273747578797A7C7D7E808182838586878888898B8C
8E8F9193
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFBFBFAF9F8F7F6F5F4F3F2F1F0EFEEEEEDEDEDECEC
EBEBEBEA
>
<
EBEAE8E7E7E7E8E9E8E7E5E3E1DFDDDBD9DAD8D7D5D4D2D0CFCDCCCECDCBCAC9C7C6C4C3C3C2C4C3
C3C2C1C2
>
<
ACADAFB0B2B3B5B6B7B8BABBBDBEC0C1C3C5C6C8C9CACDCECFCFD0D1D2D3D5D6D7D8D9DADCDDDEE0
E1E2E3E4
>
<
5251504F4E4D4C4B4A494847464544434241403F3E3D3B3A393837363534333231302F2E2D2C2B2A
29282726
>
0
<
08080808080807070707070707070707070606060606060606060605050505050505050505050404
04040404
>
4 %_Br
<
BEBCB9B7B5B3B1AEABA8A6A4A19F9C9A989693918F8E8C8B8988888786858381807E7D7B7A797877
7574737271706F6E6D6C6B6A69686766656564636262
>
<
D8D9DADADBDDDEDFE1E2E3E4E5E6E7E7E8E9EAEBEBEBECECECEDEDEEEEEFF0F2F3F4F5F6F7F8F9FA
FAFBFBFBFCFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
BDBDBDBEBFBFBDBEBFC0C1C2C3C3C4C4C1C1C2C1C2C3C3C4C5C6C3C4C6C7C9CBCDCECFD0CFD0D2D3
D4D5D7D8DADBDBDDDFE1E3E5E7E8E9E8E7E7E7E8EAEB
>
<
F2F1F1F0EFEEEDEDECEBEBEAE9E8E7E7E5E5E4E3E2E1E0DEDDDCDAD9D8D7D6D3D2D1D1D0CFCECDCC
CAC9C8C6C5C3C1C0BEBDBBBAB8B7B6B5B3B2B0AFADAC
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F3031323435363738393A3B3C
3D3E3F404142434445464748494A4B4C4D4E4F505152
>
0
<
02020202020203030303030303030303040404040404040404040505050505050505050506060606
06060606060607070707070707070707080808080808
>
4 %_Br
[
0.57763 0.91751 0.758846 0.89337 0.14902 0 0.015686 2 50 90 %_BS
%_0.57763 0.91751 0.758846 0.89337 0.14902 0 0.015686 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 472) 0 1 5 50 90 Bs
0.383062 1 0.923125 0.673945 0.321569 0 0.031373 2 50 50 %_BS
%_0.383062 1 0.923125 0.673945 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 471) 0 1 5 50 50 Bs
0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 2 50 10 %_BS
%_0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 470) 0 1 5 50 10 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 93)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 93) 0 3 Bd
[
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFDFCFBF9F8F7F6F5F3F1F0EFEEECEBEAE9E8
>
<
FEFEFFFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFD
FEFDFFFEFDFFFEFDFEFBF9F6F4F2F0EEEDEBEAE8E5E4E2DFDEDCDBD9D7D7D6
>
<
4647494A4B4D4E50505052535354545655565758595A5B5C5D5E5F60606162636363646464656565
6566666767676869696B6D6F7072737577797A7C7F818385888A8C8F919396
>
<
36383A3D3F41434547484A4C4E505254575A5D606366686B6E70727577797C7E808284868A8C8E91
929597999C9EA0A2A5A8ACAFB1B4B7B9BCBEC1C4C6C9CBCDD0D2D5D7D8DBDC
>
<
05050505050505050404040404040404040404040404030303030303030303030303030302020202
02020202020202020202010101010101010101010101010100000000000000
>
<
222221212120201F1F1F1E1E1E1D1D1C1C1C1B1B1B1A1A1919191818181717161616151515141414
131312121211111110100F0F0F0E0E0E0D0D0C0C0C0B0B0B0A0A0909090808
>
<
61605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3C3B3A39
3837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A
>
4 %_Br
<
EEEFF0F2F3F5F6F7F8F9FBFCFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
DCDEDFE1E3E5E7E9EBEDEEF0F2F4F6F7FAFCFCFDFFFDFEFFFDFEFDFEFFFEFEFFFEFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFEFE
>
<
8A888684817F7D7A7977757372706F6D6B6A6968676767666665656565646464636362626160605F
5E5D5C5B5A59585756555654545353525050504E4D4B4A494746
>
<
D2D0CDCBC9C6C4C0BEBCB9B7B4B1AFABA8A6A3A19E9C99979592918E8C8A888685807E7C79777572
706E6B686663605D5A575452504E4C4A48474543413F3D3A3836
>
<
00000000000000010101010101010101010101010202020202020202020202020203030303030303
0303030303030404040404040404040404040405050505050505
>
<
0A0A0B0B0B0C0C0D0D0D0E0E0E0F0F10101011111112121213131414141515151616171717181818
19191A1A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F20202121212222
>
<
1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F41424344454647
48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
>
4 %_Br
[
0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 2 50 89 %_BS
%_0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 399) 0 1 5 50 89 Bs
1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 2 50 50 %_BS
%_1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 398) 0 1 5 50 50 Bs
0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 2 50 11 %_BS
%_0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 397) 0 1 5 50 11 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 94)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 94) 0 3 Bd
[
<
2D2E2F313233343537383A3B3C3D3E3F414243444647484A4B4C4D4E4F5051525354555758595A5B
>
<
20212122232425262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041424344
>
<
1D1E1F20212122232425272829292A2B2C2D2D2E2F3030313233343536363738393A3B3C3C3D3E3F
>
0.000031
<
D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
>
<
DAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3
>
<
DBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4
>
4 %_Br
<
5B5A5958575554535251504F4E4D4C4B4A484746444342413F3E3D3C3B3A383735343332312F2E2D
>
<
44434241403F3E3D3C3B3A39383837363534333231302F2F2E2D2C2B2A2928272625242322212120
>
<
3F3E3D3C3C3B3A3938373636353433323130302F2E2D2D2C2B2A29292827252423222121201F1E1D
>
0.000031
<
B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9
>
<
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DA
>
<
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
>
4 %_Br
[
0.358373 0.2663 0.24686 0.000031 0.694118 0.701961 0.705882 2 50 87 %_BS
%_0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 402) 0 1 5 50 87 Bs
0.177584 0.124544 0.11545 0.000031 0.85098 0.854902 0.858824 2 50 50 %_BS
%_0.176486 0.124422 0.114809 0.000031 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 401) 0 1 5 50 50 Bs
0.358373 0.2663 0.24686 0.000031 0.694118 0.701961 0.705882 2 50 13 %_BS
%_0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 400) 0 1 5 50 13 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\715\756\742\773\751 \743\760\740\744\750\745\755\762 95)
(\715\756\742\773\751 \743\760\740\744\750\745\755\762 95) 1 2 Bd
[
<
0000010304050607090A0C0E0F101213151718
>
<
000001020304050506070808090A0B0C0D0E0F
>
<
0000010203040505060708090A0A0B0C0D0E0F
>
0.000031
<
FFFEFDFCFBFAF9F8F7F6F4F3F2F1F0EFEEEDEC
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEED
>
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 404) 0 1 5 50 0 Bs
0.093996 0.059663 0.058747 0.000031 0.92549 0.929412 0.929412 2 50 100 %_BS
%_0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 403) 0 1 5 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginPalette
0 0 Pb
0.860075 0.849699 0.789548 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
([\721\756\742\754\745\771\745\755\750\745])
Pc
0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 397) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 397)
Pc
1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 398) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 398)
Pc
0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 399) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 399)
Pc
0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 400) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 400)
Pc
0.176486 0.124422 0.114809 0.000031 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 401) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 401)
Pc
0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 402) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 402)
Pc
0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 403) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 403)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 404) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 404)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 406) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 406)
Pc
0.000031 0.562036 0.224552 0.000031 1 0.568627 0.611765 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 407) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 407)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 408) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 408)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 409) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 409)
Pc
0.000031 0.542565 0.208957 0.000031 1 0.588235 0.631373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 410) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 410)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 411) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 411)
Pc
0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 412) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 412)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 413) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 413)
Pc
0.040131 0.029267 0.027985 0.000031 0.963486 0.964409 0.965457 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 414) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 414)
Pc
0.0224 0.015991 0.015442 0.000031 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 415) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 415)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 416) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 416)
Pc
0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 417) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 417)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 418) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 418)
Pc
0.000031 0.694545 0.335912 0.000031 1 0.439216 0.494118 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 419) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 419)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 420) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 420)
Pc
0.320378 0.238193 0.216678 0.000031 0.727313 0.73241 0.73864 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421)
Pc
0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 424) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 424)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 425) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 425)
Pc
0.040131 0.029267 0.027985 0.000031 0.963486 0.964409 0.965457 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 426) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 426)
Pc
0.0224 0.015991 0.015442 0.000031 0.977956 0.978512 0.979148 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 427) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 427)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 428) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 428)
Pc
0.091676 0.062135 0.055299 0.000031 0.927071 0.928912 0.931001 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 429) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 429)
Pc
0.931945 0.862119 0.542351 0.823758 0 0.039216 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 431) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 431)
Pc
1 0.99765 0.274693 0.210666 0.019608 0.133333 0.380392 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 432) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 432)
Pc
0.90988 0.837674 0.586389 0.864317 0 0.031373 0.101961 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 433) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 433)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 434) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 434)
Pc
0.643885 0.450019 0.000031 0.000031 0.34902 0.556863 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 435) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 435)
Pc
0.980774 0.903441 0.000031 0.000031 0 0.188235 0.588235 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 436) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 436)
Pc
0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 437) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 437)
Pc
0.176486 0.124422 0.114809 0.000031 0.85192 0.8554 0.859406 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 438) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 438)
Pc
0.357397 0.269596 0.243076 0.000031 0.695206 0.700446 0.707027 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 439) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 439)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 440) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 440)
Pc
0.669764 0.473274 0.000031 0.000031 0.321569 0.537255 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 441) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 441)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 442) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 442)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 443) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 443)
Pc
0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 444) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 444)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 445) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 445)
Pc
0.081025 0.054963 0.048859 0.000031 0.934493 0.93615 0.938024 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 450) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 450)
Pc
0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 451) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 451)
Pc
0.383062 1 0.923125 0.673945 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 452) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 452)
Pc
0.622309 0.900236 0.76611 0.910674 0.129412 0 0.011765 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 453) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 453)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 454) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 454)
Pc
0.669764 0.473274 0.000031 0.000031 0.321569 0.537255 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 455) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 455)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 456) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 456)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 457) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 457)
Pc
0.679011 0.48249 0.000031 0.000031 0.309804 0.529412 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 458) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 458)
Pc
1 0.96878 0.124331 0.035065 0.015686 0.164706 0.486275 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 459) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 459)
Pc
0.268711 0.194614 0.1785 0.000031 0.77465 0.779399 0.785018 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 460) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 460)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 461) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 461)
Pc
0.000031 0.583459 0.235477 0.000031 1 0.54902 0.596078 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 462) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 462)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 463) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 463)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 464) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 464)
Pc
0.000031 0.569116 0.231235 0.000031 1 0.560784 0.603922 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 465) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 465)
Pc
0.190341 1 0.972778 0.103395 0.721569 0.054902 0.121569 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 466) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 466)
Pc
0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 467) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 467)
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 468) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 468)
Pc
0.058869 0.040314 0.037171 0.000031 0.949039 0.950327 0.951787 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 469) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 469)
Pc
0.744198 0.84799 0.74139 0.948913 0.078431 0 0.007843 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 470) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 470)
Pc
0.383062 1 0.923125 0.673945 0.321569 0 0.031373 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 471) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 471)
Pc
0.57763 0.91751 0.758846 0.89337 0.14902 0 0.015686 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 472) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 472)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
0 1 1 0 0 0 0 0 79 128 255 0 50 Lb
(\321\345\362\352\340) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(\321\353\356\351 1) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 0 0 0 1 2 79 255 79 0 50 Lb
(\320\340\341\356\367\350\351 \361\362\356\353) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 0 0 0 1 3 79 79 255 0 50 Lb
(\315\340\357\360\340\342\353\377\376\371\350\345) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 4 255 255 79 0 50 Lb
(Page 1) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 5 255 79 255 0 50 Lb
(\321\353\356\351 1) Ln
0 A
0 O
0 J 0 j 1 w 10 M []0 d1 XR
60.3174 585.0024 m
60.3174 256.8877 L
534.958 256.8877 L
534.958 585.0024 L
60.3174 585.0024 L
Bb
0 0 0 0 Bh
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 95) 175.3682 -293.7422 0 293.742 -1.08261 0 0 0.748402 16973.0156 1581.7314 Bg
-318.0087 0 0 -219.8371 345.1016 365.166 Bm
f
0 BB
/GRADIENT (YES) XT
%_u
%_0.081025 0.054963 0.048859 0.000031 0.934493 0.93615 0.938024 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 450) 0 1 Xk
%_247.7686 560.1089 m
%_265.6978 592.8101 400.7256 505.855 452.6621 498.1411 c
%_455.5449 497.7134 455.0752 500.5327 452.8154 502.3735 c
%_444.5352 509.1196 432.1133 517.6948 437.1035 525.9995 c
%_451.6436 550.2017 l
%_457.8564 560.5425 495.5742 545.9351 534.958 523.8462 c
%_534.958 503.7671 l
%_510.0146 513.1411 480.4531 520.4399 461.8867 523.5142 c
%_459.335 523.936 458.582 522.7251 460.0742 520.6128 c
%_464.4814 514.3765 468.7285 508.146 465.1836 501.9565 c
%_450.7725 476.7729 l
%_435.1895 449.5405 343.1836 488.3394 276.8096 502.7417 c
%_273.8706 503.3794 272.561 499.6685 274.8931 497.769 c
%_295.4395 481.0317 311.9756 471.3647 301.4492 451.7788 c
%_276.062 399.7021 l
%_254.668 355.8154 132.6016 383.5879 60.3184 403.8994 c
%_60.3184 507.646 l
%_91.3433 491.1128 206.1465 447.6675 269.083 439.0259 c
%_271.9351 438.6343 273.499 442.1294 271.3062 443.9946 c
%_246.7944 464.8472 206.2363 484.3569 219.8379 509.1646 c
%_247.7686 560.1089 l
%_247.7686 560.1089 l
%_f
%_/ShapeBlendPathID (B) XT
%_/ShapeBlendPathType (K) XT
%_0.268711 0.194614 0.1785 0.000031 0.77465 0.779399 0.785018 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 460) 0 1 Xk
%_246.3682 555.0063 m
%_265.0493 587.2837 393.5811 499.4292 453.1318 495.3677 c
%_456.0391 495.1704 456.8496 500.0103 454.5908 501.8501 c
%_446.3115 508.5952 434.1563 517.6372 438.9063 526.0815 c
%_451.4609 548.396 l
%_457.376 558.9106 495.5742 545.2671 534.958 523.1792 c
%_534.958 508.4761 l
%_510.0146 517.8501 476.4678 525.9058 457.3535 528.1421 c
%_454.7842 528.4429 454.0488 527.353 455.541 525.2417 c
%_459.9482 519.0054 467.5625 507.7339 464.1592 501.4663 c
%_455.3701 485.2788 l
%_440.6074 458.0903 331.6045 502.5269 264.6045 514.6333 c
%_261.6455 515.1685 260.3569 511.5601 262.6885 509.6606 c
%_283.2344 492.9243 312.2451 469.3267 300.8574 450.23 c
%_277.7114 411.415 l
%_255.4937 374.1563 132.6016 397.6953 60.3184 418.0059 c
%_60.3184 503.355 l
%_91.3433 486.8218 206.1997 441.3979 269.6045 437.4614 c
%_274.2295 437.1743 275.689 442.1304 273.4966 443.9946 c
%_248.9858 464.8472 205.6665 484.6782 219.8379 509.1646 c
%_246.3682 555.0063 l
%_246.3682 555.0063 l
%_f
%_/ShapeBlendPathID (A) XT
%_/ShapeBlendPathType (K) XT
%_U
0 Ap
0 A
u
0 O
0.081025 0.054963 0.048859 0.000031 0.934493 0.93615 0.938024 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 450) 0 1 Xk
0 J 0 j 1 w 10 M []0 d1 XR
247.7686 560.1089 m
265.6978 592.8101 400.7256 505.855 452.6621 498.1411 c
455.5449 497.7134 455.0752 500.5327 452.8154 502.3735 c
444.5352 509.1196 432.1133 517.6948 437.1035 525.9995 c
451.6436 550.2017 l
457.8564 560.5425 495.5742 545.9351 534.958 523.8462 c
534.958 503.7671 l
510.0146 513.1411 480.4531 520.4399 461.8867 523.5142 c
459.335 523.936 458.582 522.7251 460.0742 520.6128 c
464.4814 514.3765 468.7285 508.146 465.1836 501.9565 c
450.7725 476.7729 l
435.1895 449.5405 343.1836 488.3394 276.8096 502.7417 c
273.8706 503.3794 272.561 499.6685 274.8931 497.769 c
295.4395 481.0317 311.9756 471.3647 301.4492 451.7788 c
276.062 399.7021 l
254.668 355.8154 132.6016 383.5879 60.3184 403.8994 c
60.3184 507.646 l
91.3433 491.1128 206.1465 447.6675 269.083 439.0259 c
271.9351 438.6343 273.499 442.1294 271.3062 443.9946 c
246.7944 464.8472 206.2363 484.3569 219.8379 509.1646 c
247.7686 560.1089 l
247.7686 560.1089 l
f
/ShapeBlendPathID (B) XT
/ShapeBlendPathType (K) XT
0.093996 0.059663 0.058747 0.000031 0.92549 0.929412 0.929412 Xa
247.7017 559.8657 m
265.667 592.5469 400.3857 505.5488 452.6846 498.0093 c
455.5684 497.5923 455.1602 500.5078 452.9004 502.3486 c
444.6201 509.0947 432.2109 517.6919 437.1895 526.0034 c
451.6348 550.1157 l
457.834 560.4648 495.5742 545.9033 534.958 523.8145 c
534.958 503.9912 l
510.0146 513.3652 480.2637 520.7002 461.6709 523.7344 c
459.1182 524.1509 458.3662 522.9453 459.8584 520.833 c
464.2656 514.5967 468.6729 508.1265 465.1348 501.9331 c
450.9912 477.1782 l
435.4473 449.9478 342.6318 489.0151 276.2285 503.3081 c
273.2886 503.9409 271.98 500.2349 274.312 498.3354 c
294.8584 481.5981 311.9883 471.2676 301.4209 451.7051 c
276.1406 400.2598 l
254.7075 356.6885 132.6016 384.2598 60.3184 404.5713 c
60.3184 507.4419 l
91.3433 490.9087 206.1489 447.3691 269.1079 438.9512 c
272.0444 438.5649 273.6035 442.1294 271.4106 443.9946 c
246.8989 464.8472 206.209 484.3721 219.8379 509.1646 c
247.7017 559.8657 l
247.7017 559.8657 l
f
0.103243 0.066743 0.065736 0.000031 0.917647 0.921569 0.921569 Xa
247.6353 559.623 m
265.6362 592.2837 400.0449 505.2432 452.707 497.877 c
455.5918 497.4712 455.2441 500.4829 452.9844 502.3237 c
444.7041 509.0698 432.3076 517.6895 437.2754 526.0073 c
451.626 550.0298 l
457.8105 560.3872 495.5742 545.8716 534.958 523.7827 c
534.958 504.2153 l
510.0146 513.5894 480.0732 520.9604 461.4551 523.9551 c
458.9014 524.3652 458.1504 523.166 459.6426 521.0537 c
464.0498 514.8174 468.6172 508.1069 465.0859 501.9097 c
451.21 477.583 l
435.7051 450.355 342.0811 489.6904 275.647 503.874 c
272.7065 504.502 271.3989 500.8008 273.731 498.9014 c
294.2769 482.1646 312.001 471.1704 301.3926 451.6313 c
276.2192 400.8174 l
254.7466 357.5625 132.6016 384.9316 60.3184 405.2432 c
60.3184 507.2373 l
91.3433 490.7041 206.1514 447.0703 269.1328 438.877 c
272.1538 438.4951 273.7075 442.1294 271.5146 443.9946 c
247.0029 464.8472 206.1821 484.3877 219.8379 509.1646 c
247.6353 559.623 l
247.6353 559.623 l
f
0.111177 0.073426 0.066285 0.000031 0.909804 0.913725 0.917647 Xa
247.5684 559.3799 m
265.605 592.0205 399.7051 504.937 452.7295 497.7451 c
455.6152 497.3501 455.3291 500.458 453.0693 502.2988 c
444.7891 509.0449 432.4053 517.6865 437.3613 526.0112 c
451.6172 549.9438 l
457.7881 560.3096 495.5742 545.8398 534.958 523.751 c
534.958 504.4399 l
510.0146 513.814 479.8838 521.2207 461.2393 524.1753 c
458.6846 524.5801 457.9346 523.3862 459.4268 521.2739 c
463.834 515.0376 468.5615 508.0869 465.0371 501.8867 c
451.4297 477.9883 l
435.9639 450.7617 341.5293 490.3662 275.0659 504.4404 c
272.124 505.0635 270.8174 501.3672 273.1494 499.4678 c
293.6958 482.7305 312.0137 471.0737 301.3643 451.5576 c
276.2979 401.375 l
254.7861 358.4355 132.6016 385.6035 60.3184 405.915 c
60.3184 507.0332 l
91.3433 490.5 206.1338 446.6089 269.1577 438.8022 c
272.2617 438.418 273.812 442.1294 271.6191 443.9946 c
247.1074 464.8472 206.1548 484.4028 219.8379 509.1646 c
247.5684 559.3799 l
247.5684 559.3799 l
f
0.114931 0.082765 0.071656 0.000031 0.905882 0.905882 0.909804 Xa
247.502 559.1372 m
265.5742 591.7573 399.3643 504.6309 452.752 497.6128 c
455.6387 497.229 455.4131 500.4331 453.1533 502.2739 c
444.873 509.0195 432.502 517.6841 437.4473 526.0151 c
451.6084 549.8579 l
457.7646 560.2314 495.5742 545.8076 534.958 523.7192 c
534.958 504.6641 l
510.0146 514.0381 479.6943 521.481 461.0234 524.3955 c
458.4678 524.7944 457.7188 523.6064 459.2109 521.4946 c
463.6182 515.2583 468.5068 508.0674 464.9883 501.8633 c
451.6484 478.3931 l
436.2217 451.1689 340.9785 491.0415 274.4849 505.0068 c
271.542 505.625 270.2363 501.9336 272.5684 500.0342 c
293.1147 483.2969 312.0273 470.9766 301.3369 451.4839 c
276.376 401.9336 l
254.8252 359.3086 132.6016 386.2754 60.3184 406.5859 c
60.3184 506.8286 l
91.3433 490.2954 206.1333 446.2788 269.1821 438.728 c
272.3711 438.3462 273.916 442.1294 271.7231 443.9946 c
247.2119 464.8472 206.1279 484.418 219.8379 509.1646 c
247.502 559.1372 l
247.502 559.1372 l
f
0.123995 0.089662 0.077821 0.000031 0.898039 0.898039 0.901961 Xa
247.4351 558.894 m
265.5435 591.4941 399.0244 504.3252 452.7744 497.481 c
455.6621 497.1079 455.498 500.4082 453.2383 502.249 c
444.958 508.9946 432.5996 517.6812 437.5332 526.019 c
451.5996 549.772 l
457.7422 560.1538 495.5742 545.7759 534.958 523.6875 c
534.958 504.8882 l
510.0146 514.2622 479.5039 521.7412 460.8076 524.6162 c
458.251 525.0093 457.5029 523.8271 458.9951 521.7148 c
463.4023 515.4785 468.4512 508.0479 464.9395 501.8398 c
451.8672 478.7983 l
436.4795 451.5762 340.4268 491.7173 273.9038 505.5732 c
270.96 506.1865 269.6553 502.5 271.9873 500.6006 c
292.5337 483.8633 312.04 470.8794 301.3086 451.4102 c
276.4546 402.4912 l
254.8647 360.1826 132.6016 386.9473 60.3184 407.2578 c
60.3184 506.6245 l
91.3433 490.0913 206.1323 445.9473 269.207 438.6533 c
272.48 438.2749 274.0205 442.1294 271.8276 443.9946 c
247.3164 464.8472 206.1006 484.4336 219.8379 509.1646 c
247.4351 558.894 l
247.4351 558.894 l
f
0.132204 0.096712 0.084749 0.000031 0.890196 0.890196 0.894118 Xa
247.3687 558.6509 m
265.5127 591.231 398.6846 504.019 452.7959 497.3486 c
455.6865 496.9868 455.582 500.3833 453.3223 502.2241 c
445.043 508.9697 432.6973 517.6782 437.6182 526.0229 c
451.5918 549.6855 l
457.7188 560.0762 495.5742 545.7441 534.958 523.6558 c
534.958 505.1123 l
510.0146 514.4863 479.3145 522.0015 460.5918 524.8364 c
458.0352 525.2236 457.2871 524.0474 458.7793 521.9355 c
463.1865 515.6992 468.3955 508.0283 464.8906 501.8164 c
452.0859 479.2031 l
436.7373 451.9834 339.875 492.3931 273.3223 506.1392 c
270.3779 506.7476 269.0742 503.0659 271.4063 501.1665 c
291.9521 484.4297 312.0527 470.7822 301.2803 451.3364 c
276.5332 403.0488 l
254.9038 361.0557 132.6016 387.6182 60.3184 407.9297 c
60.3184 506.4199 l
91.3433 489.8867 206.1333 445.6274 269.2319 438.5791 c
272.5894 438.2041 274.1245 442.1299 271.9321 443.9946 c
247.4204 464.8472 206.0737 484.4487 219.8379 509.1646 c
247.3687 558.6509 l
247.3687 558.6509 l
f
0.141451 0.103731 0.091615 0.000031 0.882353 0.882353 0.886275 Xa
247.3018 558.4082 m
265.4814 590.9678 398.3438 503.7129 452.8184 497.2168 c
455.71 496.8657 455.667 500.3584 453.4072 502.1992 c
445.127 508.9448 432.7939 517.6758 437.7041 526.0269 c
451.583 549.5996 l
457.6963 559.9985 495.5742 545.7124 534.958 523.624 c
534.958 505.3369 l
510.0146 514.7109 479.125 522.2617 460.376 525.0566 c
457.8184 525.4385 457.0713 524.2676 458.5635 522.1558 c
462.9707 515.9194 468.3398 508.0088 464.8418 501.793 c
452.3047 479.6084 l
436.9951 452.3906 339.3242 493.0684 272.7412 506.7056 c
269.7954 507.3091 268.4932 503.6323 270.8247 501.7329 c
291.3711 484.9961 312.0654 470.6855 301.252 451.2627 c
276.6118 403.6064 l
254.9434 361.9287 132.6016 388.29 60.3184 408.6016 c
60.3184 506.2158 l
91.3433 489.6826 206.1353 445.3145 269.2568 438.5044 c
272.6982 438.1333 274.229 442.1299 272.0361 443.9946 c
247.5249 464.8472 206.0464 484.4639 219.8379 509.1646 c
247.3018 558.4082 l
247.3018 558.4082 l
f
0.150637 0.110018 0.098604 0.000031 0.87451 0.87451 0.878431 Xa
247.2349 558.165 m
265.4507 590.7046 398.0039 503.4072 452.8408 497.0845 c
455.7334 496.7446 455.751 500.3335 453.4922 502.1743 c
445.2119 508.9199 432.8916 517.6729 437.79 526.0308 c
451.5742 549.5137 l
457.6738 559.9209 495.5742 545.6807 534.958 523.5923 c
534.958 505.561 l
510.0146 514.9351 478.9346 522.522 460.1602 525.2773 c
457.6016 525.6528 456.8555 524.4883 458.3477 522.376 c
462.7549 516.1396 468.2842 507.9888 464.793 501.77 c
452.5244 480.0132 l
437.2539 452.7974 338.7725 493.7441 272.1602 507.272 c
269.2134 507.8706 267.9116 504.1987 270.2437 502.2993 c
290.79 485.562 312.0781 470.5884 301.2236 451.189 c
276.6904 404.1641 l
254.9824 362.8027 132.6016 388.9619 60.3184 409.2734 c
60.3184 506.0112 l
91.3433 489.478 206.1377 445.0024 269.2817 438.4297 c
272.8076 438.0625 274.3335 442.1299 272.1406 443.9946 c
247.6294 464.8472 206.019 484.4795 219.8379 509.1646 c
247.2349 558.165 l
247.2349 558.165 l
f
0.160189 0.110048 0.108736 0.000031 0.866667 0.870588 0.870588 Xa
247.1685 557.9219 m
265.4199 590.4414 397.6641 503.1011 452.8633 496.9526 c
455.7568 496.6235 455.8359 500.3086 453.5762 502.1494 c
445.2969 508.895 432.9893 517.6699 437.876 526.0347 c
451.5654 549.4277 l
457.6504 559.8433 495.5742 545.6489 534.958 523.5605 c
534.958 505.7852 l
510.0146 515.1592 478.7451 522.7822 459.9443 525.4976 c
457.3848 525.8677 456.6396 524.7085 458.1318 522.5967 c
462.5391 516.3604 468.2285 507.9692 464.7441 501.7466 c
452.7432 480.4185 l
437.5117 453.2046 338.2207 494.4199 271.5786 507.8379 c
268.6313 508.4316 267.3306 504.7646 269.6626 502.8652 c
290.2085 486.1284 312.0908 470.4912 301.1953 451.1152 c
276.769 404.7217 l
255.022 363.6758 132.6016 389.6338 60.3184 409.9453 c
60.3184 505.8071 l
91.3433 489.2739 206.1406 444.7007 269.3066 438.3555 c
272.917 437.9927 274.4375 442.1299 272.2451 443.9946 c
247.7334 464.8472 205.9922 484.4946 219.8379 509.1646 c
247.1685 557.9219 l
247.1685 557.9219 l
f
0.168368 0.117769 0.109194 0.000031 0.858824 0.862745 0.866667 Xa
247.1016 557.6792 m
265.3892 590.1782 397.3232 502.7949 452.8857 496.8203 c
455.7803 496.5024 455.9199 500.2837 453.6611 502.1245 c
445.3809 508.8701 433.0859 517.6675 437.9619 526.0386 c
451.5566 549.3418 l
457.6279 559.7656 495.5742 545.6172 534.958 523.5288 c
534.958 506.0093 l
510.0146 515.3833 478.5557 523.0425 459.7285 525.7178 c
457.168 526.082 456.4238 524.9287 457.916 522.8169 c
462.3232 516.5806 468.1729 507.9497 464.6953 501.7231 c
452.9619 480.8232 l
437.7695 453.6118 337.6699 495.0952 270.9976 508.4043 c
268.0493 508.9932 266.7495 505.3311 269.0815 503.4316 c
289.6274 486.6948 312.1035 470.394 301.167 451.0415 c
276.8477 405.2793 l
255.061 364.5488 132.6016 390.3057 60.3184 410.6172 c
60.3184 505.6025 l
91.3433 489.0693 206.1445 444.4043 269.3315 438.2808 c
273.0264 437.9229 274.542 442.1299 272.3491 443.9946 c
247.8379 464.8472 205.9648 484.5098 219.8379 509.1646 c
247.1016 557.6792 l
247.1016 557.6792 l
f
0.177584 0.124544 0.11545 0.000031 0.85098 0.854902 0.858824 Xa
247.0352 557.436 m
265.3579 589.9155 396.9834 502.4893 452.9082 496.6885 c
455.8037 496.3813 456.0049 500.2593 453.7451 502.0991 c
445.4658 508.8447 433.1836 517.6646 438.0479 526.0425 c
451.5479 549.2559 l
457.6045 559.6875 495.5742 545.585 534.958 523.4966 c
534.958 506.2339 l
510.0146 515.6079 478.3652 523.3032 459.5117 525.9385 c
456.9512 526.2969 456.207 525.1494 457.6992 523.0376 c
462.1064 516.8013 468.1182 507.9302 464.6475 501.6997 c
453.1807 481.2285 l
438.0273 454.019 337.1182 495.771 270.4165 508.9707 c
267.4668 509.5547 266.1685 505.8975 268.5 503.998 c
289.0464 487.2612 312.1172 470.2974 301.1396 450.9673 c
276.9258 405.8379 l
255.1006 365.4229 132.6016 390.9775 60.3184 411.2881 c
60.3184 505.3984 l
91.3433 488.8652 206.1484 444.1123 269.356 438.2065 c
273.1353 437.8535 274.646 442.1299 272.4536 443.9946 c
247.9424 464.8472 205.938 484.5254 219.8379 509.1646 c
247.0352 557.436 l
247.0352 557.436 l
f
0.185855 0.130678 0.122133 0.000031 0.843137 0.847059 0.85098 Xa
246.9683 557.1934 m
265.3271 589.6523 396.6426 502.1831 452.9307 496.5562 c
455.8271 496.2603 456.0889 500.2344 453.8301 502.0742 c
445.5498 508.8198 433.2803 517.6621 438.1338 526.0464 c
451.5391 549.1699 l
457.582 559.6099 495.5742 545.5532 534.958 523.4648 c
534.958 506.458 l
510.0146 515.832 478.1758 523.5635 459.2959 526.1587 c
456.7344 526.5112 455.9912 525.3696 457.4834 523.2578 c
461.8906 517.0215 468.0625 507.9106 464.5986 501.6763 c
453.3994 481.6333 l
438.2852 454.4263 336.5674 496.4463 269.8354 509.5371 c
266.8848 510.1162 265.5874 506.4639 267.9189 504.5645 c
288.4653 487.8276 312.1299 470.2002 301.1113 450.8936 c
277.0044 406.3955 l
255.1396 366.2959 132.6016 391.6494 60.3184 411.96 c
60.3184 505.1938 l
91.3433 488.6606 206.1528 443.8252 269.3809 438.1318 c
273.2446 437.7837 274.7505 442.1299 272.5576 443.9946 c
248.0469 464.8472 205.9106 484.5405 219.8379 509.1646 c
246.9683 557.1934 l
246.9683 557.1934 l
f
0.195071 0.137484 0.128115 0.000031 0.835294 0.839216 0.843137 Xa
246.9019 556.9502 m
265.2964 589.3892 396.3027 501.877 452.9531 496.4243 c
455.8506 496.1392 456.1738 500.2095 453.9141 502.0493 c
445.6348 508.7949 433.3779 517.6592 438.2197 526.0503 c
451.5303 549.084 l
457.5586 559.5322 495.5742 545.5215 534.958 523.4331 c
534.958 506.6821 l
510.0146 516.0562 477.9863 523.8237 459.0801 526.3789 c
456.5176 526.7261 455.7754 525.5898 457.2676 523.4785 c
461.6748 517.2422 468.0068 507.8911 464.5498 501.6528 c
453.6182 482.0386 l
438.543 454.8335 336.0156 497.1221 269.2539 510.103 c
266.3027 510.6772 265.0063 507.0298 267.3379 505.1304 c
287.8838 488.394 312.1426 470.103 301.083 450.8198 c
277.083 406.9531 l
255.1792 367.1689 132.6016 392.3213 60.3184 412.6318 c
60.3184 504.9897 l
91.3433 488.4565 206.1577 443.542 269.4058 438.0576 c
273.354 437.7153 274.8545 442.1299 272.6621 443.9946 c
248.1509 464.8472 205.8838 484.5557 219.8379 509.1646 c
246.9019 556.9502 l
246.9019 556.9502 l
f
0.204349 0.144564 0.13431 0.000031 0.827451 0.831373 0.835294 Xa
246.835 556.707 m
265.2656 589.126 395.9629 501.5713 452.9756 496.292 c
455.874 496.0181 456.2578 500.1846 453.999 502.0244 c
445.7197 508.77 433.4756 517.6563 438.3057 526.0542 c
451.5215 548.998 l
457.5361 559.4546 495.5742 545.4897 534.958 523.4014 c
534.958 506.9063 l
510.0146 516.2803 477.7959 524.084 458.8643 526.5996 c
456.3008 526.9404 455.5596 525.8105 457.0518 523.6987 c
461.459 517.4624 467.9512 507.8711 464.501 501.6299 c
453.8379 482.4434 l
438.8018 455.2402 335.4639 497.7979 268.6729 510.6694 c
265.7207 511.2388 264.4248 507.5962 266.7568 505.6968 c
287.3027 488.96 312.1553 470.0059 301.0547 450.7461 c
277.1616 407.5107 l
255.2183 368.043 132.6016 392.9932 60.3184 413.3037 c
60.3184 504.7852 l
91.3433 488.252 206.1626 443.2593 269.4307 437.9829 c
273.4639 437.6465 274.959 442.1299 272.7666 443.9946 c
248.2554 464.8472 205.8564 484.5713 219.8379 509.1646 c
246.835 556.707 l
246.835 556.707 l
f
0.214633 0.152499 0.142123 0.000031 0.819608 0.823529 0.827451 Xa
246.7681 556.4644 m
265.2344 588.8628 395.6221 501.2651 452.998 496.1602 c
455.8975 495.897 456.3428 500.1597 454.084 501.9995 c
445.8037 508.7451 433.5723 517.6538 438.3916 526.0581 c
451.5127 548.9121 l
457.5137 559.377 495.5742 545.458 534.958 523.3696 c
534.958 507.1309 l
510.0146 516.5049 477.6064 524.3442 458.6484 526.8198 c
456.084 527.1553 455.3438 526.0308 456.8359 523.9189 c
461.2432 517.6826 467.8955 507.8516 464.4521 501.6064 c
454.0566 482.8486 l
439.0596 455.6475 334.9131 498.4731 268.0918 511.2358 c
265.1382 511.8003 263.8438 508.1626 266.1753 506.2632 c
286.7217 489.5264 312.168 469.9092 301.0264 450.6724 c
277.2402 408.0684 l
255.2578 368.916 132.6016 393.665 60.3184 413.9756 c
60.3184 504.5811 l
91.3433 488.0479 206.168 442.9844 269.4556 437.9082 c
273.5728 437.5781 275.0635 442.1299 272.8706 443.9946 c
248.3599 464.8472 205.8291 484.5864 219.8379 509.1646 c
246.7681 556.4644 l
246.7681 556.4644 l
f
0.225589 0.16141 0.151308 0.000031 0.811765 0.815686 0.819608 Xa
246.7017 556.2212 m
265.2036 588.5996 395.2822 500.959 453.0195 496.0278 c
455.9219 495.7759 456.4268 500.1348 454.168 501.9746 c
445.8887 508.7202 433.6699 517.6509 438.4766 526.062 c
451.5049 548.8257 l
457.4902 559.2993 495.5742 545.4263 534.958 523.3379 c
534.958 507.355 l
510.0146 516.729 477.417 524.6045 458.4326 527.04 c
455.8682 527.3696 455.1279 526.251 456.6201 524.1396 c
461.0273 517.9033 467.8398 507.832 464.4033 501.583 c
454.2754 483.2534 l
439.3174 456.0547 334.3613 499.1489 267.5103 511.8018 c
264.5562 512.3613 263.2627 508.7285 265.5942 506.8291 c
286.1401 490.0928 312.1807 469.812 300.998 450.5986 c
277.3188 408.626 l
255.2969 369.7891 132.6016 394.3359 60.3184 414.6475 c
60.3184 504.3765 l
91.3433 487.8433 206.1729 442.7129 269.4805 437.834 c
273.6821 437.5103 275.1675 442.1304 272.9751 443.9946 c
248.4639 464.8472 205.8022 484.6016 219.8379 509.1646 c
246.7017 556.2212 l
246.7017 556.2212 l
f
0.234928 0.169406 0.151919 0.000031 0.803922 0.807843 0.815686 Xa
246.6348 555.978 m
265.1729 588.3364 394.9424 500.6533 453.042 495.896 c
455.9453 495.6548 456.5117 500.1099 454.2529 501.9497 c
445.9736 508.6953 433.7676 517.6479 438.5625 526.0659 c
451.4961 548.7397 l
457.4678 559.2217 495.5742 545.3945 534.958 523.3062 c
534.958 507.5791 l
510.0146 516.9531 477.2266 524.8647 458.2168 527.2607 c
455.6514 527.5845 454.9121 526.4717 456.4043 524.3599 c
460.8115 518.1235 467.7842 507.8125 464.3545 501.5596 c
454.4941 483.6587 l
439.5752 456.4619 333.8096 499.8247 266.9292 512.3682 c
263.9741 512.9229 262.6816 509.2949 265.0132 507.3955 c
285.5591 490.6592 312.1934 469.7148 300.9697 450.5249 c
277.3975 409.1836 l
255.3364 370.6631 132.6016 395.0078 60.3184 415.3193 c
60.3184 504.1724 l
91.3433 487.6392 206.1782 442.4409 269.5054 437.7593 c
273.7915 437.4424 275.272 442.1304 273.0796 443.9946 c
248.5684 464.8472 205.7749 484.6172 219.8379 509.1646 c
246.6348 555.978 l
246.6348 555.978 l
f
0.242985 0.176455 0.158846 0.000031 0.796078 0.8 0.807843 Xa
246.5684 555.7354 m
265.1421 588.0732 394.6016 500.3472 453.0645 495.7637 c
455.9688 495.5337 456.5957 500.085 454.3369 501.9248 c
446.0576 508.6699 433.8643 517.6455 438.6484 526.0698 c
451.4873 548.6538 l
457.4443 559.1436 495.5742 545.3623 534.958 523.2744 c
534.958 507.8032 l
510.0146 517.1772 477.0371 525.125 458.001 527.481 c
455.4346 527.7988 454.6963 526.6919 456.1885 524.5806 c
460.5957 518.3442 467.7295 507.793 464.3057 501.5361 c
454.7129 484.0635 l
439.833 456.8691 333.2588 500.5 266.3481 512.9346 c
263.3921 513.4844 262.1006 509.8613 264.4321 507.9619 c
284.978 491.2256 312.207 469.6177 300.9424 450.4512 c
277.4756 409.7422 l
255.3755 371.5361 132.6016 395.6797 60.3184 415.9902 c
60.3184 503.9678 l
91.3433 487.4346 206.1919 442.2935 269.5298 437.6851 c
273.9019 437.3828 275.376 442.1304 273.1836 443.9946 c
248.6729 464.8472 205.748 484.6323 219.8379 509.1646 c
246.5684 555.7354 l
246.5684 555.7354 l
f
0.252964 0.176974 0.168704 0.000031 0.788235 0.796078 0.8 Xa
246.5015 555.4922 m
265.1108 587.8101 394.2617 500.041 453.0869 495.6318 c
455.9922 495.4126 456.6807 500.0601 454.4219 501.8999 c
446.1426 508.645 433.9619 517.6426 438.7344 526.0737 c
451.4785 548.5679 l
457.4219 559.0659 495.5742 545.3306 534.958 523.2427 c
534.958 508.0278 l
510.0146 517.4019 476.8477 525.3853 457.7852 527.7012 c
455.2178 528.0137 454.4805 526.9121 455.9727 524.8008 c
460.3799 518.5645 467.6738 507.7729 464.2568 501.5132 c
454.9326 484.4688 l
440.0918 457.2759 332.707 501.1758 265.7671 513.501 c
262.8096 514.0459 261.519 510.4277 263.8506 508.5283 c
284.397 491.7915 312.2197 469.521 300.9141 450.3774 c
277.5542 410.2998 l
255.415 372.4092 132.6016 396.3516 60.3184 416.6621 c
60.3184 503.7637 l
91.3433 487.2305 206.1948 441.9951 269.5547 437.6104 c
274.0107 437.3135 275.4805 442.1304 273.2881 443.9946 c
248.7773 464.8472 205.7207 484.6475 219.8379 509.1646 c
246.5015 555.4922 l
246.5015 555.4922 l
f
0.262181 0.183993 0.175021 0.000031 0.780392 0.788235 0.792157 Xa
246.4351 555.2495 m
265.0801 587.5469 393.9209 499.7354 453.1094 495.4995 c
456.0156 495.2915 456.7646 500.0352 454.5059 501.875 c
446.2266 508.6201 434.0586 517.6401 438.8203 526.0776 c
451.4697 548.4819 l
457.3984 558.9883 495.5742 545.2988 534.958 523.2109 c
534.958 508.252 l
510.0146 517.626 476.6572 525.6455 457.5693 527.9219 c
455.001 528.228 454.2646 527.1328 455.7568 525.0215 c
460.1641 518.7852 467.6182 507.7534 464.208 501.4897 c
455.1514 484.8735 l
440.3496 457.6831 332.1563 501.8511 265.1855 514.0669 c
262.2275 514.6069 260.938 510.9937 263.2695 509.0942 c
283.8154 492.3579 312.2324 469.4238 300.8857 450.3037 c
277.6328 410.8574 l
255.4541 373.2832 132.6016 397.0234 60.3184 417.334 c
60.3184 503.5591 l
91.3433 487.0259 206.1973 441.6963 269.5796 437.5361 c
274.1201 437.2437 275.5845 442.1304 273.3921 443.9946 c
248.8813 464.8472 205.6938 484.6631 219.8379 509.1646 c
246.4351 555.2495 l
246.4351 555.2495 l
f
0.268711 0.194614 0.1785 0.000031 0.77465 0.779399 0.785018 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 460) 0 1 Xk
246.3682 555.0063 m
265.0493 587.2837 393.5811 499.4292 453.1318 495.3677 c
456.0391 495.1704 456.8496 500.0103 454.5908 501.8501 c
446.3115 508.5952 434.1563 517.6372 438.9063 526.0815 c
451.4609 548.396 l
457.376 558.9106 495.5742 545.2671 534.958 523.1792 c
534.958 508.4761 l
510.0146 517.8501 476.4678 525.9058 457.3535 528.1421 c
454.7842 528.4429 454.0488 527.353 455.541 525.2417 c
459.9482 519.0054 467.5625 507.7339 464.1592 501.4663 c
455.3701 485.2788 l
440.6074 458.0903 331.6045 502.5269 264.6045 514.6333 c
261.6455 515.1685 260.3569 511.5601 262.6885 509.6606 c
283.2344 492.9243 312.2451 469.3267 300.8574 450.23 c
277.7114 411.415 l
255.4937 374.1563 132.6016 397.6953 60.3184 418.0059 c
60.3184 503.355 l
91.3433 486.8218 206.1997 441.3979 269.6045 437.4614 c
274.2295 437.1743 275.689 442.1304 273.4966 443.9946 c
248.9858 464.8472 205.6665 484.6782 219.8379 509.1646 c
246.3682 555.0063 l
246.3682 555.0063 l
f
/ShapeBlendPathID (A) XT
/ShapeBlendPathType (K) XT
U
(Adobe Path Blends) 1 0 92 XP
%444342410100000000000000CCCCCC7D1400000000000000430000000000
%0000000000000000000002000000410000000000000000000000FFFFFFFF
%FFFFFFFF000000004200000000000000000080BFFFFFFFFFFFFFFFFF1400
%0000
446.9805 541.7134 m
442.1934 533.4224 l
451.3135 541.4009 493.1055 530.3999 534.957 513.2026 c
534.957 518.0718 l
495.0928 536.6821 455.7139 549.3853 446.9805 541.7134 c
446.9805 541.7134 l
Bb
1 (Unnamed gradient 11) 8.16113 2.56543 -29 73.6914 1 0 0 1 446.98 -541.7139 Bg
64.452 -35.7263 -17.2334 -31.0899 463.7588 559.8247 Xm
6919.6284 -3835.6125 -17.2334 -31.0899 -6452.0024 4393.2935 Bc
34.0306 -18.8635 -17.2334 -31.0899 467.626 557.6812 Bm
17.0153 -9.43174 -17.2334 -31.0899 501.6563 538.8179 Bm
5.67177 -3.14391 -17.2334 -31.0899 518.6719 529.3857 Bm
6919.6284 -3835.6125 -17.2334 -31.0899 524.3438 526.2422 Bc
f
0 BB
/GRADIENT (YES) XT
450.9775 548.6372 m
446.9805 541.7134 l
455.7139 549.3853 495.0938 536.6821 534.958 518.0718 c
534.958 523.2222 l
495.2598 544.1147 456.7217 558.5864 450.9775 548.6372 c
450.9775 548.6372 l
Bb
1 (Unnamed gradient 9) 9.20508 0.895508 -29 67.9824 1 0 0 1 450.9775 -548.6377 Bg
59.4588 -32.9585 -14.7768 -26.658 467.5713 562.8623 Xm
6922.0234 -3836.9397 -14.7768 -26.658 -6451.4795 4398.1543 Bc
32.1077 -17.7976 -14.7768 -26.658 470.5439 561.2144 Bm
16.0539 -8.8988 -14.7768 -26.658 502.6523 543.417 Bm
5.35129 -2.96627 -14.7768 -26.658 518.7061 534.5181 Bm
6922.0234 -3836.9397 -14.7768 -26.658 524.0566 531.5518 Bc
f
0 BB
/GRADIENT (YES) XT
442.1934 533.4214 m
436.8164 524.1069 l
444.2832 533.8462 489.3936 524.2065 534.958 508.4019 c
534.958 513.2017 l
493.1055 530.3989 451.3145 541.3999 442.1934 533.4214 c
442.1934 533.4214 l
Bb
1 (Unnamed gradient 15) 7.69971 6.01367 -30 79.5405 1 0 0 1 442.1934 -533.4219 Bg
68.8841 -39.7703 -21.8133 -37.7817 460.7998 558.3262 Xm
6849.1558 -3954.3621 -21.8133 -37.7817 -6383.5342 4509.9043 Bc
27.7415 -16.0166 -21.8133 -37.7817 465.6221 555.5425 Bm
22.5439 -13.0157 -21.8133 -37.7817 493.3633 539.5259 Bm
8.95494 -5.17013 -21.8133 -37.7817 515.9072 526.5098 Bm
6849.1558 -3954.3621 -21.8133 -37.7817 524.8623 521.3398 Bc
f
0 BB
/GRADIENT (YES) XT
445.208 538.6431 m
450.9775 548.6372 l
443.0928 533.8042 476.7832 520.9116 468.083 505.8423 c
465.6006 501.5435 l
469.5811 514.8403 441.3105 525.3979 445.208 538.6431 c
445.208 538.6431 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 101) 6.6665 -9.99707 -29 12.7363 1 0 0 1 445.2075 -538.6436 Bg
11.1394 -6.17469 -18.4711 -33.3228 461.1094 545.3076 Xm
6922.3569 -3837.125 -18.4711 -33.3228 -6459.688 4381.5684 Bc
4.0102 -2.22289 -18.4711 -33.3228 462.6689 544.4434 Bm
4.0102 -2.22289 -18.4711 -33.3228 466.6787 542.2202 Bm
6922.3569 -3837.125 -18.4711 -33.3228 470.6895 539.9976 Bc
f
0 BB
/GRADIENT (YES) XT
*u
0.320378 0.238193 0.216678 0.000031 0.727313 0.73241 0.73864 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421) 0 1 Xk
468.0752 512.5347 m
467.5078 511.0239 l
468.4199 509.9292 l
467.1611 510.0942 l
466.5986 508.5806 l
466.3877 510.1938 l
465.1279 510.3521 l
466.2568 511.1841 l
466.041 512.7964 l
466.9492 511.6968 l
468.0752 512.5347 l
468.0752 512.5347 l
f
451.9707 533.5005 m
451.4316 532.0288 l
452.4365 531.064 l
451.1025 531.1245 l
450.5684 529.6509 l
450.2822 531.1597 l
448.9482 531.2144 l
450.1055 532.0864 l
449.8145 533.5942 l
450.8154 532.6235 l
451.9707 533.5005 l
451.9707 533.5005 l
f
457.2324 526.646 m
457.0527 526.1548 456.873 525.6646 456.6943 525.1743 c
457.0293 524.8521 457.3633 524.5308 457.6982 524.2085 c
457.2539 524.229 456.8096 524.2495 456.3643 524.27 c
456.1865 523.7778 456.0088 523.2866 455.8311 522.7954 c
455.7354 523.2993 455.6396 523.8022 455.5449 524.3052 c
455.1006 524.3228 454.6553 524.3413 454.2109 524.3599 c
454.5967 524.6499 454.9824 524.9409 455.3682 525.2319 c
455.2715 525.7339 455.1738 526.2368 455.0771 526.7397 c
455.4111 526.4155 455.7441 526.0923 456.0781 525.769 c
456.4629 526.061 456.8477 526.354 457.2324 526.646 c
457.2324 526.646 l
f
462.9307 520.4761 m
462.751 519.9858 462.5723 519.4956 462.3926 519.0044 c
462.7266 518.6831 463.0615 518.3608 463.3965 518.0386 c
462.9521 518.0591 462.5078 518.0796 462.0625 518.1001 c
461.8848 517.6089 461.707 517.1177 461.5293 516.6265 c
461.4336 517.1294 461.3379 517.6323 461.2432 518.1353 c
460.7988 518.1538 460.3535 518.1714 459.9092 518.1899 c
460.2949 518.481 460.6807 518.771 461.0664 519.062 c
460.9697 519.564 460.8721 520.0669 460.7754 520.5698 c
461.1094 520.2456 461.4424 519.9224 461.7764 519.5991 c
462.1611 519.8911 462.5459 520.1841 462.9307 520.4761 c
462.9307 520.4761 l
f
*U
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405) 0 1 Xk
458.0791 551.1431 m
457.6641 549.1646 l
459.8174 548.7944 l
457.4111 547.9487 l
457.0059 545.9712 l
455.9336 547.4272 l
453.5293 546.5757 l
455.2725 548.3208 l
454.1924 549.772 l
456.3418 549.394 l
458.0791 551.1431 l
458.0791 551.1431 l
f
472.6563 548.9897 m
472.5273 548.3784 472.3984 547.7671 472.2705 547.1558 c
472.9268 547.0317 473.585 546.9067 474.2422 546.7827 c
473.5068 546.5317 472.7705 546.2808 472.0352 546.0298 c
471.9092 545.4194 471.7832 544.8081 471.6572 544.1968 c
471.3311 544.6538 471.0059 545.1099 470.6797 545.5659 c
469.9443 545.313 469.209 545.0601 468.4736 544.8071 c
469.0078 545.3394 469.542 545.8726 470.0771 546.4048 c
469.748 546.8599 469.4199 547.3149 469.0918 547.769 c
469.748 547.6421 470.4033 547.5151 471.0596 547.3882 c
471.5918 547.9224 472.124 548.4556 472.6563 548.9897 c
472.6563 548.9897 l
f
486.7822 544.5063 m
486.6621 543.9438 486.5439 543.3804 486.4248 542.8179 c
487.0215 542.6929 487.6182 542.5669 488.2148 542.4409 c
487.5459 542.2212 486.876 542.0005 486.207 541.7808 c
486.0898 541.2183 485.9736 540.6558 485.8574 540.0933 c
485.5625 540.521 485.2686 540.9468 484.9736 541.3745 c
484.3047 541.1519 483.6357 540.9302 482.9678 540.7085 c
483.4551 541.1919 483.9414 541.6753 484.4297 542.1597 c
484.1328 542.5845 483.8359 543.0103 483.5391 543.4351 c
484.1348 543.3071 484.7305 543.1802 485.3262 543.0522 c
485.8115 543.5366 486.2969 544.022 486.7822 544.5063 c
486.7822 544.5063 l
f
500.5869 539.0552 m
500.4766 538.5405 500.3682 538.0269 500.2578 537.5122 c
500.7939 537.3853 501.3301 537.2583 501.8672 537.1313 c
501.2637 536.9429 500.6602 536.7534 500.0576 536.564 c
499.9502 536.0503 499.8428 535.5366 499.7354 535.022 c
499.4727 535.4194 499.21 535.8169 498.9473 536.2144 c
498.3438 536.0229 497.7422 535.8325 497.1387 535.6421 c
497.5801 536.0767 498.0205 536.5112 498.4609 536.9458 c
498.1953 537.3423 497.9307 537.7378 497.666 538.1343 c
498.2002 538.0054 498.7354 537.8765 499.2705 537.7476 c
499.71 538.1831 500.1484 538.6196 500.5869 539.0552 c
500.5869 539.0552 l
f
514.1523 533.0024 m
514.0518 532.5366 513.9521 532.0708 513.8516 531.605 c
514.3271 531.4771 514.8027 531.3491 515.2793 531.2212 c
514.7422 531.063 514.2051 530.9048 513.6689 530.7466 c
513.5703 530.2808 513.4727 529.8149 513.375 529.3491 c
513.1436 529.7173 512.9121 530.0854 512.6807 530.4536 c
512.1445 530.2935 511.6084 530.1333 511.0723 529.9731 c
511.4648 530.3589 511.8584 530.7446 512.252 531.1304 c
512.0186 531.4976 511.7861 531.8647 511.5527 532.2319 c
512.0273 532.1021 512.502 531.9722 512.9756 531.8423 c
513.3682 532.229 513.7598 532.6157 514.1523 533.0024 c
514.1523 533.0024 l
f
527.5234 526.5142 m
527.4336 526.0962 527.3428 525.6792 527.252 525.2622 c
527.667 525.1333 528.082 525.0034 528.4971 524.8745 c
528.0264 524.7466 527.5566 524.6196 527.0869 524.4927 c
526.998 524.0757 526.9092 523.6577 526.8203 523.2407 c
526.6201 523.5786 526.4199 523.9175 526.2207 524.2563 c
525.75 524.1274 525.2803 523.9985 524.8105 523.8696 c
525.1572 524.2065 525.5039 524.5435 525.8506 524.8794 c
525.6484 525.2173 525.4473 525.5552 525.2451 525.8931 c
525.6592 525.7622 526.0732 525.6323 526.4883 525.5015 c
526.833 525.8394 527.1787 526.1763 527.5234 526.5142 c
527.5234 526.5142 l
f
436.8164 524.1079 m
440.4844 530.4624 l
436.6113 517.2593 465.751 508.2046 461.8633 495.0698 c
456.8955 486.4653 l
464.7754 501.6011 428.2061 509.1948 436.8164 524.1079 c
436.8164 524.1079 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 106) 5.72754 -12.0957 -30 14.4839 1 0 0 1 436.8159 -524.1084 Bg
12.5434 -7.24194 -16.9485 -29.3557 451.0176 526.6899 Xm
6853.8091 -3957.0491 -16.9485 -29.3557 -6401.1606 4482.7974 Bc
4.64106 -2.67952 -16.9485 -29.3557 452.6484 525.7485 Bm
4.64106 -2.67952 -16.9485 -29.3557 457.2891 523.0688 Bm
6853.8091 -3957.0491 -16.9485 -29.3557 461.9307 520.3896 Bc
f
0 BB
/GRADIENT (YES) XT
440.4844 530.4624 m
445.208 538.6431 l
441.3105 525.3979 469.5811 514.8403 465.6006 501.5435 c
461.8633 495.0708 l
465.75 508.2056 436.6113 517.2593 440.4844 530.4624 c
440.4844 530.4624 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 94) 6.78027 -10.1299 -29 13.502 1 0 0 1 440.4844 -530.4629 Bg
11.8091 -6.54588 -16.5003 -29.7673 455.5146 535.2168 Xm
6922.6006 -3837.2603 -16.5003 -29.7673 -6465.5508 4371.626 Bc
4.36936 -2.42197 -16.5003 -29.7673 457.0498 534.3657 Bm
4.36936 -2.42197 -16.5003 -29.7673 461.4189 531.9438 Bm
6922.6006 -3837.2603 -16.5003 -29.7673 465.7881 529.522 Bc
f
0 BB
/GRADIENT (YES) XT
238.3091 543.2769 m
228.7329 526.6909 l
256.335 557.2739 431.5313 460.1997 459.5947 491.1392 c
463.3584 497.6577 l
435.2334 466.8823 265.2217 573.272 238.3091 543.2769 c
238.3091 543.2769 l
Bb
1 (Unnamed gradient 5) 24.0259 17.2275 -30 188.6748 1 0 0 1 238.3091 -543.2773 Bg
163.3972 -94.3374 -48.0846 -83.285 286.3774 602.1475 Xm
6870.6831 -3966.7905 -48.0846 -83.285 -6572.8677 4562.3345 Bc
84.3129 -48.6781 -48.0846 -83.285 297.8154 595.5439 Bm
42.1565 -24.3391 -48.0846 -83.285 382.1279 546.8657 Bm
14.0522 -8.11301 -48.0846 -83.285 424.2842 522.5269 Bm
6870.6831 -3966.7905 -48.0846 -83.285 438.3369 514.4136 Bc
f
0 BB
/GRADIENT (YES) XT
246.6724 557.7622 m
238.3091 543.2769 l
265.2222 573.272 435.2334 466.8823 463.3584 497.6577 c
468.084 505.8423 l
443.3135 469.3599 267.8354 594.4185 246.6724 557.7622 c
246.6724 557.7622 l
Bb
1 (Unnamed gradient 3) 26.8486 12.7979 -30 180.2729 1 0 0 1 246.6724 -557.7627 Bg
156.121 -90.1365 -43.2341 -74.8836 295.1377 608.002 Xm
6877.1626 -3970.5317 -43.2341 -74.8836 -6571.0962 4572.2241 Bc
80.5584 -46.5104 -43.2341 -74.8836 306.0664 601.6924 Bm
40.2792 -23.2552 -43.2341 -74.8836 386.625 555.1821 Bm
13.4264 -7.75173 -43.2341 -74.8836 426.9033 531.9268 Bm
6877.1626 -3970.5317 -43.2341 -74.8836 440.3301 524.1748 Bc
f
0 BB
/GRADIENT (YES) XT
228.7329 526.6909 m
218.168 508.3921 l
244.8062 543.8813 435.416 449.2612 456.8965 486.4653 c
459.5947 491.1401 l
431.5313 460.1997 256.3354 557.2739 228.7329 526.6909 c
228.7329 526.6909 l
Bb
1 (Unnamed gradient 7) 21.0029 24.543 -30 200.4551 1 0 0 1 228.7329 -526.6914 Bg
173.5992 -100.2275 -54.8864 -95.066 277.1787 598.7671 Xm
6862.6304 -3962.1418 -54.8864 -95.066 -6571.564 4552.8906 Bc
87.494 -50.5147 -54.8864 -95.066 291.0664 590.749 Bm
43.747 -25.2573 -54.8864 -95.066 378.5605 540.2344 Bm
14.5823 -8.41912 -54.8864 -95.066 422.3076 514.9771 Bm
6862.6304 -3962.1418 -54.8864 -95.066 436.8896 506.5581 Bc
f
0 BB
/GRADIENT (YES) XT
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405) 0 1 Xk
260.2451 562.3706 m
259.4917 558.7788 l
263.4009 558.1069 l
259.0337 556.5728 l
258.2969 552.9829 l
256.3516 555.6265 l
251.9868 554.0806 l
255.1514 557.2485 l
253.1909 559.8823 l
257.0923 559.1958 l
260.2451 562.3706 l
260.2451 562.3706 l
f
280.3711 559.356 m
280.1313 558.2124 279.8911 557.0688 279.6514 555.9253 c
280.896 555.7114 282.1406 555.4976 283.3853 555.2837 c
281.9946 554.7954 280.6045 554.3071 279.2139 553.8188 c
278.9795 552.6753 278.7451 551.5327 278.5103 550.3901 c
277.8911 551.231 277.2715 552.0728 276.6523 552.9155 c
275.2627 552.4224 273.873 551.9302 272.4839 551.438 c
273.4912 552.4468 274.499 553.4546 275.5063 554.4634 c
274.8823 555.3022 274.2578 556.1411 273.6338 556.98 c
274.876 556.7612 276.1177 556.5425 277.3594 556.3247 c
278.3638 557.3345 279.3677 558.3452 280.3711 559.356 c
280.3711 559.356 l
f
299.8652 553.2026 m
299.6367 552.1128 299.4072 551.0229 299.1787 549.9341 c
300.3652 549.73 301.5508 549.5259 302.7363 549.3218 c
301.4121 548.856 300.0869 548.3911 298.7617 547.9253 c
298.5391 546.8364 298.3154 545.7476 298.0918 544.6577 c
297.501 545.4604 296.9106 546.2622 296.3208 547.0649 c
294.9961 546.5952 293.6724 546.1265 292.3477 545.6577 c
293.3081 546.6177 294.2681 547.5786 295.2285 548.5405 c
294.6338 549.3394 294.0391 550.1382 293.4438 550.938 c
294.6279 550.73 295.811 550.522 296.9946 550.314 c
297.9512 551.2769 298.9082 552.2397 299.8652 553.2026 c
299.8652 553.2026 l
f
318.9531 545.8276 m
318.7354 544.7915 318.5186 543.7554 318.3008 542.7202 c
319.4287 542.5259 320.5557 542.3315 321.6836 542.1382 c
320.4238 541.6958 319.1641 541.2534 317.9043 540.811 c
317.6924 539.7749 317.4795 538.7397 317.2676 537.7046 c
316.7061 538.4673 316.1455 539.23 315.584 539.9927 c
314.3252 539.5464 313.0664 539.1001 311.8076 538.6548 c
312.7197 539.5679 313.6328 540.4819 314.5459 541.395 c
313.9805 542.1548 313.415 542.9146 312.8496 543.6753 c
313.9746 543.4771 315.0996 543.2788 316.2246 543.0806 c
317.1338 543.9966 318.0439 544.9116 318.9531 545.8276 c
318.9531 545.8276 l
f
337.8193 537.8804 m
337.6123 536.8979 337.4063 535.9155 337.2012 534.9341 c
338.2695 534.7495 339.3389 534.5659 340.4082 534.3823 c
339.2139 533.9634 338.0195 533.5435 336.8252 533.1245 c
336.624 532.1421 336.4219 531.1606 336.2207 530.1792 c
335.6885 530.9019 335.1572 531.6245 334.625 532.3481 c
333.4307 531.9253 332.2373 531.5024 331.0439 531.0796 c
331.9092 531.9458 332.7754 532.811 333.6406 533.6772 c
333.1045 534.3989 332.5684 535.1187 332.0322 535.8394 c
333.0986 535.6509 334.165 535.4634 335.2324 535.2759 c
336.0947 536.144 336.9561 537.0122 337.8193 537.8804 c
337.8193 537.8804 l
f
356.5967 529.7183 m
356.4023 528.7896 356.207 527.8618 356.0127 526.9331 c
357.0234 526.7593 358.0332 526.5854 359.0439 526.4116 c
357.915 526.0151 356.7861 525.6187 355.6572 525.2222 c
355.4668 524.2944 355.2764 523.3667 355.0859 522.439 c
354.583 523.1216 354.0811 523.8052 353.5781 524.4888 c
352.4492 524.0894 351.3213 523.6899 350.1934 523.2896 c
351.0107 524.1089 351.8291 524.9272 352.6475 525.7456 c
352.1406 526.4272 351.6338 527.1079 351.127 527.7886 c
352.1348 527.6108 353.1436 527.4341 354.1523 527.2563 c
354.9668 528.0776 355.7813 528.8979 356.5967 529.7183 c
356.5967 529.7183 l
f
375.3887 521.5894 m
375.2051 520.7144 375.0215 519.8403 374.8389 518.9653 c
375.791 518.8013 376.7422 518.6382 377.6943 518.4741 c
376.6309 518.1001 375.5674 517.7271 374.5039 517.354 c
374.3242 516.48 374.1455 515.605 373.9658 514.731 c
373.4922 515.3745 373.0186 516.019 372.5449 516.6626 c
371.4814 516.2856 370.4189 515.9097 369.3555 515.5327 c
370.126 516.3042 370.8975 517.0757 371.668 517.8472 c
371.1904 518.4888 370.7129 519.1304 370.2354 519.772 c
371.1855 519.605 372.1357 519.438 373.0859 519.271 c
373.8535 520.0435 374.6211 520.8159 375.3887 521.5894 c
375.3887 521.5894 l
f
394.2998 513.7524 m
394.1279 512.9312 393.9551 512.1108 393.7832 511.2896 c
394.6768 511.1362 395.5703 510.9829 396.4639 510.8286 c
395.4658 510.478 394.4678 510.1274 393.4697 509.7769 c
393.3008 508.9565 393.1328 508.1362 392.9648 507.3159 c
392.5195 507.9194 392.0752 508.5239 391.6309 509.1284 c
390.6328 508.7749 389.6348 508.4214 388.6377 508.0688 c
389.3604 508.7925 390.084 509.5161 390.8076 510.2397 c
390.3594 510.8423 389.9111 511.4438 389.4639 512.0464 c
390.3555 511.8901 391.2461 511.7329 392.1377 511.5757 c
392.8584 512.3013 393.5791 513.0269 394.2998 513.7524 c
394.2998 513.7524 l
f
413.459 506.5728 m
413.2979 505.8062 413.1367 505.0386 412.9756 504.271 c
413.8105 504.1274 414.6455 503.9839 415.4814 503.8403 c
414.5479 503.5132 413.6152 503.1851 412.6826 502.8579 c
412.5254 502.0913 412.3682 501.3247 412.2109 500.5581 c
411.7949 501.1226 411.3799 501.687 410.9639 502.2515 c
410.0313 501.9214 409.0996 501.5913 408.167 501.2612 c
408.8428 501.938 409.5195 502.6138 410.1953 503.2905 c
409.7764 503.853 409.3574 504.4165 408.9395 504.979 c
409.7725 504.8315 410.6055 504.6851 411.4385 504.5386 c
412.1123 505.2173 412.7852 505.895 413.459 506.5728 c
413.459 506.5728 l
f
433.0361 500.7085 m
432.8857 499.9946 432.7363 499.2817 432.5869 498.5679 c
433.3633 498.4351 434.1396 498.3013 434.917 498.1675 c
434.0488 497.8628 433.1816 497.5581 432.3145 497.2534 c
432.168 496.5405 432.0215 495.8276 431.875 495.1147 c
431.4893 495.6401 431.1025 496.1646 430.7158 496.6899 c
429.8486 496.3833 428.9824 496.0757 428.1152 495.769 c
428.7441 496.3979 429.373 497.0269 430.001 497.6558 c
429.6123 498.1792 429.2227 498.7026 428.833 499.2261 c
429.6074 499.0894 430.3828 498.9536 431.1572 498.8169 c
431.7832 499.4478 432.4092 500.0776 433.0361 500.7085 c
433.0361 500.7085 l
f
453.2295 498.3872 m
452.8145 496.4087 l
454.9678 496.0376 l
452.5625 495.1929 l
452.1563 493.2153 l
451.085 494.6714 l
448.6797 493.8198 l
450.4238 495.5649 l
449.3438 497.0161 l
451.4922 496.6382 l
453.2295 498.3872 l
453.2295 498.3872 l
f
225.8662 521.7261 m
218.168 508.3921 l
197.146 471.9819 300.998 448.4302 282.1465 412.1768 c
292.0361 429.3062 l
304.833 462.8843 213.1133 488.1665 225.8662 521.7261 c
225.8662 521.7261 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 110) 10.48 -44.5791 -30 41.2988 1 0 0 1 225.8662 -521.7266 Bg
35.7658 -20.6494 -35.3662 -61.256 254.0293 507.7754 Xm
6875.5562 -3969.6038 -35.3662 -61.256 -6617.9502 4475.3145 Bc
14.3063 -8.25977 -35.3662 -61.256 257.606 505.7104 Bm
14.3063 -8.25976 -35.3662 -61.256 271.9121 497.4507 Bm
6875.5562 -3969.6038 -35.3662 -61.256 286.2188 489.1909 Bc
f
0 BB
/GRADIENT (YES) XT
246.6724 557.7622 m
235.3877 538.2173 l
222.7705 504.9009 313.3564 477.5532 300.6514 444.2261 c
307.5342 456.1479 l
328.4141 492.312 227.0566 520.811 246.6724 557.7622 c
246.6724 557.7622 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 93) 8.44385 -46.4883 -29 39.9941 1 0 0 1 246.6724 -557.7627 Bg
34.9797 -19.3895 -37.394 -67.4606 273.813 545.0049 Xm
6941.0903 -3847.5088 -37.394 -67.4606 -6663.4297 4390.3809 Bc
13.6421 -7.56192 -37.394 -67.4606 277.6606 542.8721 Bm
13.6421 -7.56192 -37.394 -67.4606 291.3027 535.3101 Bm
6941.0903 -3847.5088 -37.394 -67.4606 304.9443 527.748 Bc
f
0 BB
/GRADIENT (YES) XT
*u
0.320378 0.238193 0.216678 0.000031 0.727313 0.73241 0.73864 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421) 0 1 Xk
305.3213 471.4331 m
304.2656 467.4321 l
306.873 464.8774 l
303.6201 464.9731 l
302.5762 460.9663 l
301.6221 465.0259 l
298.3691 465.105 l
301.0313 467.519 l
300.0654 471.5747 l
302.665 469.0054 l
305.3213 471.4331 l
305.3213 471.4331 l
f
257.0991 517.8364 m
256.1055 513.9438 l
258.917 511.7407 l
255.4995 511.5513 l
254.519 507.6538 l
253.3999 511.4292 l
249.9829 511.2241 l
252.709 513.7476 l
251.5771 517.5171 l
254.3809 515.3013 l
257.0991 517.8364 l
257.0991 517.8364 l
f
274.0166 504.6196 m
273.6855 503.3218 273.354 502.0239 273.0229 500.7271 c
273.9604 499.9917 274.897 499.2583 275.8345 498.5239 c
274.6948 498.4604 273.5557 498.397 272.4165 498.3345 c
272.0898 497.0347 271.7632 495.7358 271.436 494.437 c
271.0635 495.6958 270.6899 496.9536 270.3174 498.2124 c
269.1777 498.144 268.0391 498.0747 266.8999 498.0063 c
267.8086 498.8472 268.7178 499.689 269.626 500.5298 c
269.249 501.7866 268.8716 503.0435 268.4946 504.2993 c
269.4292 503.561 270.3638 502.8228 271.2983 502.0845 c
272.2041 502.9292 273.1104 503.7739 274.0166 504.6196 c
274.0166 504.6196 l
f
290.146 490.3569 m
289.8149 489.0591 289.4834 487.7622 289.1523 486.4644 c
290.0898 485.731 291.0264 484.9966 291.9639 484.2622 c
290.8242 484.1987 289.6851 484.1353 288.5464 484.0718 c
288.2192 482.7729 287.8926 481.4741 287.5659 480.1753 c
287.1929 481.4331 286.8198 482.6919 286.4468 483.9507 c
285.3076 483.8813 284.1685 483.813 283.0293 483.7446 c
283.938 484.5854 284.8467 485.4272 285.7559 486.2681 c
285.3784 487.5249 285.001 488.7808 284.6245 490.0376 c
285.5591 489.2993 286.4932 488.561 287.4277 487.8218 c
288.3335 488.6675 289.2397 489.5122 290.146 490.3569 c
290.146 490.3569 l
f
*U
235.3877 538.2173 m
225.8662 521.7261 l
213.1133 488.1665 304.834 462.8843 292.0366 429.3052 c
300.6514 444.2261 l
313.3564 477.5532 222.7705 504.9009 235.3877 538.2173 c
235.3877 538.2173 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 103) 9.94336 -44.2676 -29 41.2427 1 0 0 1 235.3877 -538.2178 Bg
36.0717 -19.9948 -34.8058 -62.7913 262.7339 525.3457 Xm
6942.5527 -3848.3198 -34.8058 -62.7913 -6676.2119 4371.666 Bc
14.4287 -7.99794 -34.8058 -62.7913 266.3408 523.3462 Bm
14.4287 -7.99794 -34.8058 -62.7913 280.7695 515.3481 Bm
6942.5527 -3848.3198 -34.8058 -62.7913 295.1982 507.3501 Bc
f
0 BB
/GRADIENT (YES) XT
60.3179 445.6958 m
129.2124 423.5825 260.7524 388.2188 288.9038 423.8804 c
297.4702 438.7173 l
268.1982 402.1807 120.2739 450.8208 60.3179 473.9526 c
60.3179 445.6958 l
60.3179 445.6958 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 109) 43.8115 11.8828 -29 204.0352 1 0 0 1 46.2334 -479.5732 Bg
178.4532 -98.9182 -54.7206 -98.7185 117.4053 540.8154 Xm
6960.8252 -3858.4482 -54.7206 -98.7185 -6829.1436 4391.3501 Bc
134.9106 -74.7822 -54.7206 -98.7185 131.6816 532.9019 Bm
14.9901 -8.30913 -54.7206 -98.7185 266.5923 458.1196 Bm
6960.8252 -3858.4482 -54.7206 -98.7185 281.5825 449.8105 Bc
f
0 BB
/GRADIENT (YES) XT
60.3179 473.9536 m
120.2739 450.8218 268.1982 402.1816 297.4702 438.7183 c
307.5342 456.1479 l
281.7969 412.5488 101.7354 483.4194 60.3179 503.9683 c
60.3179 473.9536 l
60.3179 473.9536 l
Bb
1 (\715\756\742\773\751 \743\760\740\744\750\745\755\762 102) 32.9521 11.334 -29 207.5874 1 0 0 1 60.3179 -503.9688 Bg
181.56 -100.6404 -52.495 -94.7035 119.5171 562.6538 Xm
6956.4106 -3856.0012 -52.495 -94.7035 -6822.3687 4410.6035 Bc
137.2594 -76.0841 -52.495 -94.7035 134.042 554.6025 Bm
15.2511 -8.4538 -52.495 -94.7035 271.3013 478.5186 Bm
6956.4106 -3856.0012 -52.495 -94.7035 286.5522 470.0645 Bc
f
0 BB
/GRADIENT (YES) XT
60.3184 418.542 m
133.1016 399.0645 259.1509 372.3457 282.147 412.1768 c
288.9043 423.8804 l
260.7529 388.2188 129.2124 423.5825 60.3184 445.6958 c
60.3184 418.542 l
60.3184 418.542 l
Bb
1 (Unnamed gradient 1) 55.0093 14.5342 -29 202.5142 1 0 0 1 32.1382 -455.1592 Bg
177.1229 -98.1808 -57.9298 -104.5081 116.1123 521.9473 Xm
6965.6489 -3861.1223 -57.9298 -104.5081 -6833.5957 4374.2329 Bc
126.8307 -70.3034 -57.9298 -104.5081 132.0532 513.1108 Bm
18.41 -10.2049 -57.9298 -104.5081 258.8843 442.8076 Bm
6965.6489 -3861.1223 -57.9298 -104.5081 277.2939 432.6025 Bc
f
0 BB
/GRADIENT (YES) XT
0.000031 0.000031 0.000031 0.000031 1 1 1 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 405) 0 1 Xk
73.9624 493.1196 m
72.5688 486.1597 l
79.501 483.3667 l
71.7217 481.8823 l
70.3574 474.9194 l
66.9434 480.9624 l
60.3184 479.6753 l
60.3184 480.5103 l
64.8374 484.6704 l
61.396 490.7007 l
68.314 487.8823 l
73.9624 493.1196 l
73.9624 493.1196 l
f
117.3179 475.6216 m
116.9883 473.5571 116.6592 471.4937 116.3301 469.4292 c
118.4033 468.7417 120.4766 468.0552 122.5503 467.3687 c
120.2773 466.7876 118.0044 466.2056 115.7314 465.6245 c
115.4111 463.5601 115.0908 461.4956 114.77 459.4312 c
113.6948 461.1362 112.6196 462.8413 111.5435 464.5454 c
109.2725 463.9565 107.001 463.3677 104.73 462.7778 c
106.3379 464.4136 107.9463 466.0483 109.5542 467.6831 c
108.4712 469.3833 107.3877 471.0845 106.3042 472.7847 c
108.374 472.0903 110.4434 471.396 112.5122 470.7017 c
114.1143 472.3413 115.7158 473.9819 117.3179 475.6216 c
117.3179 475.6216 l
f
157.082 461.7153 m
156.8755 459.8823 156.668 458.0483 156.4609 456.2153 c
158.3203 455.7485 160.1797 455.2817 162.0386 454.8149 c
160.0547 454.1558 158.0703 453.4966 156.0864 452.8364 c
155.8867 451.0034 155.6875 449.1704 155.4883 447.3374 c
154.4692 448.7632 153.4502 450.189 152.4312 451.6147 c
150.4487 450.9478 148.4663 450.2817 146.4834 449.6157 c
147.8384 451.1567 149.1924 452.6978 150.5464 454.2378 c
149.521 455.6597 148.4951 457.0806 147.4692 458.5015 c
149.3252 458.0278 151.1816 457.5552 153.0371 457.0815 c
154.3853 458.6265 155.7339 460.1704 157.082 461.7153 c
157.082 461.7153 l
f
193.8389 450.8687 m
193.7432 449.2456 193.647 447.6226 193.5508 445.9985 c
195.2148 445.7329 196.8794 445.4663 198.5439 445.2007 c
196.8228 444.4692 195.1016 443.7388 193.3804 443.0083 c
193.291 441.3853 193.2021 439.7632 193.1128 438.1401 c
192.1455 439.312 191.1777 440.4839 190.21 441.6558 c
188.4907 440.9194 186.7715 440.1831 185.0522 439.4458 c
186.1748 440.9009 187.2983 442.356 188.4209 443.811 c
187.4478 444.978 186.4741 446.146 185.501 447.312 c
187.1626 447.0396 188.8242 446.7681 190.4858 446.4946 c
191.6035 447.9536 192.7212 449.4106 193.8389 450.8687 c
193.8389 450.8687 l
f
228.105 443.103 m
228.1113 441.6733 228.1177 440.2427 228.1235 438.812 c
229.6089 438.73 231.0942 438.6479 232.5796 438.5649 c
231.0996 437.769 229.6196 436.9731 228.1401 436.1763 c
228.1523 434.7476 228.1641 433.3188 228.1763 431.8901 c
227.2559 432.8276 226.3354 433.7661 225.4146 434.7046 c
223.937 433.9038 222.459 433.103 220.9814 432.3022 c
221.8921 433.6782 222.8027 435.0542 223.7134 436.4302 c
222.7881 437.3647 221.8633 438.2983 220.9375 439.2319 c
222.4209 439.144 223.9043 439.0562 225.3877 438.9683 c
226.2935 440.3462 227.1992 441.7251 228.105 443.103 c
228.105 443.103 l
f
260.2734 439.2241 m
260.374 437.9722 260.4736 436.7202 260.5747 435.4673 c
261.8945 435.5562 263.2144 435.6431 264.5337 435.731 c
263.2778 434.8745 262.0205 434.0181 260.7642 433.1616 c
260.8696 431.9116 260.9751 430.6616 261.0811 429.4106 c
260.2041 430.1333 259.3271 430.8569 258.4502 431.5786 c
257.1953 430.7183 255.9409 429.8579 254.6865 428.9976 c
255.4009 430.3003 256.1152 431.604 256.8301 432.9067 c
255.9492 433.6255 255.0684 434.3442 254.187 435.063 c
255.5059 435.145 256.8247 435.228 258.1431 435.3101 c
258.853 436.6157 259.563 437.9194 260.2734 439.2241 c
260.2734 439.2241 l
f
289.9434 442.6196 m
290.5073 439.3599 l
294.0059 440.0981 l
290.8579 437.3599 l
291.436 434.1079 l
288.9263 435.6743 l
285.7847 432.9272 l
287.3813 436.6333 l
284.8623 438.188 l
288.3589 438.9116 l
289.9434 442.6196 l
289.9434 442.6196 l
f
0.320378 0.238193 0.216678 0.000031 0.727313 0.73241 0.73864 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 421) 0 1 Xk
245.5586 534.8374 m
243.9761 531.145 l
246.4136 528.5347 l
243.0078 528.8745 l
241.4375 525.1753 l
240.915 529.0776 l
237.5068 529.4019 l
240.5898 531.4751 l
240.0532 535.3735 l
242.4814 532.7524 l
245.5586 534.8374 l
245.5586 534.8374 l
f
449.0781 539.314 m
448.3486 538.1948 l
449.2002 537.2134 l
447.9023 537.5073 l
447.1777 536.3862 l
447.1045 537.687 l
445.8057 537.9761 l
447.0586 538.4858 l
446.9795 539.7856 l
447.8271 538.8003 l
449.0781 539.314 l
449.0781 539.314 l
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
